<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.env.production">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env.production" />
              <option name="originalContent" value="# Production environment variables for Render&#10;# База данных - Render PostgreSQL&#10;DATABASE_URL=postgresql://giftpropaganda_db_user:cSLpUy9JBOc1KEzf7tBCEZtDxQU61KV5@dpg-d21dudp5pdvs73fqkaeg-a.oregon-postgres.render.com/giftpropaganda_db&#10;&#10;# Telegram Bot&#10;TELEGRAM_BOT_TOKEN=8429342375:AAFl55U3d2jiq3bm4UNTyDrbB0rztFTio2I&#10;WEBHOOK_URL=https://giftpropaganda-backend.onrender.com&#10;&#10;# Продакшен настройки&#10;DEBUG=False&#10;LOG_LEVEL=INFO&#10;" />
              <option name="updatedContent" value="# Production environment variables for Render&#10;# База данных - Render PostgreSQL&#10;DATABASE_URL=postgresql://giftpropaganda_db_user:cSLpUy9JBOc1KEzf7tBCEZtDxQU61KV5@dpg-d21dudp5pdvs73fqkaeg-a.oregon-postgres.render.com/giftpropaganda_db&#10;&#10;# Telegram Bot&#10;TELEGRAM_BOT_TOKEN=8429342375:AAFl55U3d2jiq3bm4UNTyDrbB0rztFTio2I&#10;WEBHOOK_URL=https://giftpropaganda.onrender.com&#10;&#10;# Продакшен настройки&#10;DEBUG=False&#10;LOG_LEVEL=INFO" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.env.render">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env.render" />
              <option name="updatedContent" value="# Переменные окружения для Render&#10;DATABASE_URL=postgresql://giftpropaganda_db_user:cSLpUy9JBOc1KEzf7tBCEZtDxQU61KV5@dpg-d21dudp5pdvs73fqkaeg-a.oregon-postgres.render.com/giftpropaganda_db&#10;TELEGRAM_BOT_TOKEN=8429342375:AAFl55U3d2jiq3bm4UNTyDrbB0rztFTio2I&#10;WEBHOOK_URL=https://giftpropaganda.onrender.com&#10;DEBUG=False&#10;LOG_LEVEL=INFO" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="originalContent" value="FROM python:3.12&#10;WORKDIR /app&#10;CMD [&quot;uvicorn&quot;, &quot;server.main:app&quot;, &quot;--host&quot;, &quot;0.0.0.0&quot;, &quot;--port&quot;, &quot;8000&quot;]&#10;RUN pip install fastapi uvicorn sqlalchemy psycopg2-binary feedparser requests apscheduler aiohttp&#10;" />
              <option name="updatedContent" value="FROM python:3.12&#10;WORKDIR /app&#10;COPY requirements.txt .&#10;RUN pip install -r requirements.txt&#10;COPY . .&#10;CMD [&quot;uvicorn&quot;, &quot;server.main:app&quot;, &quot;--host&quot;, &quot;0.0.0.0&quot;, &quot;--port&quot;, &quot;8000&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Dockerfile.render">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile.render" />
              <option name="originalContent" value="# Production Dockerfile для Render&#10;FROM python:3.12-slim&#10;&#10;# Устанавливаем системные зависимости&#10;RUN apt-get update &amp;&amp; apt-get install -y \&#10;    gcc \&#10;    &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;WORKDIR /app&#10;&#10;# Копируем requirements и устанавливаем зависимости&#10;COPY requirements.txt .&#10;RUN pip install --no-cache-dir -r requirements.txt&#10;&#10;# Копируем код приложения&#10;COPY server/ ./server/&#10;COPY .env ./&#10;&#10;# Создаем пользователя для безопасности&#10;RUN useradd -m -u 1000 appuser &amp;&amp; chown -R appuser:appuser /app&#10;USER appuser&#10;&#10;# Экспонируем порт&#10;EXPOSE 8000&#10;&#10;# Команда запуска&#10;CMD [&quot;uvicorn&quot;, &quot;server.main:app&quot;, &quot;--host&quot;, &quot;0.0.0.0&quot;, &quot;--port&quot;, &quot;8000&quot;]&#10;" />
              <option name="updatedContent" value="# Production Dockerfile для Render&#10;FROM python:3.12-slim&#10;&#10;# Устанавливаем системные зависимости&#10;RUN apt-get update &amp;&amp; apt-get install -y \&#10;    gcc \&#10;    &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;WORKDIR /app&#10;&#10;# Копируем requirements и устанавливаем зависимости&#10;COPY requirements.txt .&#10;RUN pip install --no-cache-dir -r requirements.txt&#10;&#10;# Копируем код приложения&#10;COPY server/ ./server/&#10;&#10;# Экспонируем порт&#10;EXPOSE 8000&#10;&#10;# Команда запуска (переменные окружения будут переданы Render)&#10;CMD [&quot;uvicorn&quot;, &quot;server.main:app&quot;, &quot;--host&quot;, &quot;0.0.0.0&quot;, &quot;--port&quot;, &quot;8000&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/giftpropaganda-frontend/src/App.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/giftpropaganda-frontend/src/App.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect, useCallback } from 'react';&#10;import styled, { ThemeProvider, createGlobalStyle } from 'styled-components';&#10;import { fetchNews, NewsResponse, NewsItem } from './api/news';&#10;import TelegramWebApp from './telegram/TelegramWebApp';&#10;import SearchBar from './components/SearchBar';&#10;import NewsModal from './components/NewsModal';&#10;&#10;// Глобальные стили для Telegram Mini App&#10;const GlobalStyle = createGlobalStyle&lt;{ theme: any }&gt;`&#10;  * {&#10;    margin: 0;&#10;    padding: 0;&#10;    box-sizing: border-box;&#10;  }&#10;&#10;  body {&#10;    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;&#10;    background-color: var(--tg-theme-bg-color, #ffffff);&#10;    color: var(--tg-theme-text-color, #000000);&#10;    overflow-x: hidden;&#10;    -webkit-font-smoothing: antialiased;&#10;    -moz-osx-font-smoothing: grayscale;&#10;    margin: 0;&#10;    padding: 0;&#10;  }&#10;&#10;  html, body, #root {&#10;    height: var(--tg-viewport-height, 100vh);&#10;    margin: 0;&#10;    padding: 0;&#10;  }&#10;`;&#10;&#10;const AppContainer = styled.div&lt;{ theme: any }&gt;`&#10;  background-color: var(--tg-theme-bg-color, #ffffff);&#10;  min-height: var(--tg-viewport-height, 100vh);&#10;  color: var(--tg-theme-text-color, #000000);&#10;  padding: 0;&#10;  margin: 0;&#10;`;&#10;&#10;const Header = styled.header&lt;{ theme: any }&gt;`&#10;  background-color: var(--tg-theme-secondary-bg-color, #f8f9fa);&#10;  color: var(--tg-theme-text-color, #000000);&#10;  padding: 16px;&#10;  text-align: center;&#10;  border-bottom: 1px solid var(--tg-theme-hint-color, #e0e0e0);&#10;  position: sticky;&#10;  top: 0;&#10;  z-index: 100;&#10;`;&#10;&#10;const Title = styled.h1`&#10;  font-size: 18px;&#10;  font-weight: 600;&#10;  margin: 0;&#10;  color: var(--tg-theme-text-color, #000000);&#10;`;&#10;&#10;const CategoryFilter = styled.div`&#10;  display: flex;&#10;  gap: 8px;&#10;  padding: 12px 16px;&#10;  overflow-x: auto;&#10;  background-color: var(--tg-theme-bg-color, #ffffff);&#10;  border-bottom: 1px solid var(--tg-theme-hint-color, #e0e0e0);&#10;`;&#10;&#10;const CategoryButton = styled.button&lt;{ $active: boolean }&gt;`&#10;  padding: 8px 16px;&#10;  border-radius: 20px;&#10;  border: 1px solid var(--tg-theme-button-color, #007AFF);&#10;  background-color: ${props =&gt; props.$active ? 'var(--tg-theme-button-color, #007AFF)' : 'transparent'};&#10;  color: ${props =&gt; props.$active ? 'var(--tg-theme-button-text-color, #ffffff)' : 'var(--tg-theme-button-color, #007AFF)'};&#10;  font-size: 14px;&#10;  white-space: nowrap;&#10;  cursor: pointer;&#10;  transition: all 0.2s ease;&#10;&#10;  &amp;:active {&#10;    transform: scale(0.95);&#10;  }&#10;`;&#10;&#10;const NewsList = styled.div`&#10;  padding: 8px;&#10;`;&#10;&#10;const NewsItemCard = styled.div&lt;{ $isNew?: boolean }&gt;`&#10;  background-color: var(--tg-theme-secondary-bg-color, #ffffff);&#10;  margin-bottom: 8px;&#10;  border-radius: 12px;&#10;  overflow: hidden;&#10;  border: 1px solid var(--tg-theme-hint-color, #e0e0e0);&#10;  transition: transform 0.1s ease;&#10;  position: relative;&#10;  cursor: pointer;&#10;&#10;  ${props =&gt; props.$isNew &amp;&amp; `&#10;    border-left: 4px solid var(--tg-theme-button-color, #007AFF);&#10;    box-shadow: 0 2px 8px rgba(0, 122, 255, 0.1);&#10;  `}&#10;&#10;  &amp;:active {&#10;    transform: scale(0.98);&#10;  }&#10;`;&#10;&#10;const NewsContent = styled.div`&#10;  padding: 16px;&#10;`;&#10;&#10;const NewsTitle = styled.h2`&#10;  color: var(--tg-theme-link-color, #007AFF);&#10;  margin: 0 0 8px 0;&#10;  font-size: 16px;&#10;  font-weight: 600;&#10;  line-height: 1.3;&#10;  display: -webkit-box;&#10;  -webkit-line-clamp: 2;&#10;  -webkit-box-orient: vertical;&#10;  overflow: hidden;&#10;`;&#10;&#10;const NewsText = styled.p`&#10;  color: var(--tg-theme-text-color, #000000);&#10;  margin: 0 0 12px 0;&#10;  font-size: 14px;&#10;  line-height: 1.4;&#10;  display: -webkit-box;&#10;  -webkit-line-clamp: 3;&#10;  -webkit-box-orient: vertical;&#10;  overflow: hidden;&#10;`;&#10;&#10;const NewsFooter = styled.div`&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  margin-top: 8px;&#10;`;&#10;&#10;const NewsSource = styled.span`&#10;  color: var(--tg-theme-hint-color, #999999);&#10;  font-size: 12px;&#10;`;&#10;&#10;const NewsDate = styled.span`&#10;  color: var(--tg-theme-hint-color, #999999);&#10;  font-size: 12px;&#10;`;&#10;&#10;const CategoryTag = styled.span&lt;{ $category: string }&gt;`&#10;  background-color: ${props =&gt; getCategoryColor(props.$category)};&#10;  color: white;&#10;  padding: 2px 8px;&#10;  border-radius: 12px;&#10;  font-size: 10px;&#10;  font-weight: 500;&#10;  text-transform: uppercase;&#10;`;&#10;&#10;const LoadingContainer = styled.div`&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  height: 200px;&#10;  color: var(--tg-theme-hint-color, #999999);&#10;`;&#10;&#10;const ErrorContainer = styled.div`&#10;  display: flex;&#10;  flex-direction: column;&#10;  justify-content: center;&#10;  align-items: center;&#10;  height: 200px;&#10;  color: var(--tg-theme-destructive-text-color, #ff3b30);&#10;  text-align: center;&#10;  padding: 20px;&#10;`;&#10;&#10;const RetryButton = styled.button`&#10;  background-color: var(--tg-theme-button-color, #007AFF);&#10;  color: var(--tg-theme-button-text-color, #ffffff);&#10;  border: none;&#10;  padding: 12px 24px;&#10;  border-radius: 8px;&#10;  margin-top: 16px;&#10;  cursor: pointer;&#10;&#10;  &amp;:active {&#10;    transform: scale(0.95);&#10;  }&#10;`;&#10;&#10;// Компоненты для медиа&#10;const MediaContainer = styled.div`&#10;  margin: 12px 0;&#10;  border-radius: 8px;&#10;  overflow: hidden;&#10;`;&#10;&#10;const NewsImage = styled.img`&#10;  width: 100%;&#10;  height: auto;&#10;  max-height: 300px;&#10;  object-fit: cover;&#10;  border-radius: 8px;&#10;`;&#10;&#10;const NewsVideo = styled.video`&#10;  width: 100%;&#10;  height: auto;&#10;  max-height: 300px;&#10;  border-radius: 8px;&#10;`;&#10;&#10;// Функция для получения цвета категории&#10;const getCategoryColor = (category: string): string =&gt; {&#10;  const colors: { [key: string]: string } = {&#10;    gifts: '#FF6B6B',&#10;    crypto: '#4ECDC4',&#10;    nft: '#45B7D1',&#10;    tech: '#96CEB4',&#10;    community: '#FECA57',&#10;    general: '#DDA0DD'&#10;  };&#10;  return colors[category] || colors.general;&#10;};&#10;&#10;// Функция для форматирования даты&#10;const formatDate = (dateString: string): string =&gt; {&#10;  const date = new Date(dateString);&#10;  const now = new Date();&#10;  const diffMs = now.getTime() - date.getTime();&#10;  const diffMins = Math.floor(diffMs / 60000);&#10;  const diffHours = Math.floor(diffMins / 60);&#10;  const diffDays = Math.floor(diffHours / 24);&#10;&#10;  if (diffMins &lt; 1) return 'сейчас';&#10;  if (diffMins &lt; 60) return `${diffMins}м`;&#10;  if (diffHours &lt; 24) return `${diffHours}ч`;&#10;  if (diffDays &lt; 7) return `${diffDays}д`;&#10;&#10;  return date.toLocaleDateString('ru-RU', {&#10;    day: 'numeric',&#10;    month: 'short'&#10;  });&#10;};&#10;&#10;const categories = [&#10;  { key: 'all', label: 'Все' },&#10;  { key: 'gifts', label: 'Подарки' },&#10;  { key: 'crypto', label: 'Крипто' },&#10;  { key: 'nft', label: 'NFT' },&#10;  { key: 'tech', label: 'Технологии' },&#10;  { key: 'community', label: 'Сообщество' }&#10;];&#10;&#10;const App: React.FC = () =&gt; {&#10;  const [news, setNews] = useState&lt;NewsItem[]&gt;([]);&#10;  const [loading, setLoading] = useState&lt;boolean&gt;(true);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [searchTerm, setSearchTerm] = useState&lt;string&gt;('');&#10;  const [selectedCategory, setSelectedCategory] = useState&lt;string&gt;('all');&#10;  const [selectedNews, setSelectedNews] = useState&lt;NewsItem | null&gt;(null);&#10;  const [theme, setTheme] = useState&lt;any&gt;({});&#10;&#10;  // Инициализация Telegram WebApp&#10;  useEffect(() =&gt; {&#10;    TelegramWebApp.init();&#10;    setTheme(TelegramWebApp.getThemeParams());&#10;&#10;    // Слушаем изменения темы&#10;    const handleThemeChanged = () =&gt; {&#10;      setTheme(TelegramWebApp.getThemeParams());&#10;    };&#10;&#10;    window.addEventListener('themeChanged', handleThemeChanged);&#10;    return () =&gt; window.removeEventListener('themeChanged', handleThemeChanged);&#10;  }, []);&#10;&#10;  // Загрузка новостей&#10;  const getNews = useCallback(async () =&gt; {&#10;    setLoading(true);&#10;    setError(null);&#10;&#10;    try {&#10;      const response: NewsResponse = await fetchNews(selectedCategory === 'all' ? undefined : selectedCategory);&#10;&#10;      if (response.status === 'success') {&#10;        setNews(response.data);&#10;      } else {&#10;        setError(response.message || 'Ошибка загрузки новостей');&#10;      }&#10;    } catch (err) {&#10;      setError('Ошибка сети');&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  }, [selectedCategory]);&#10;&#10;  useEffect(() =&gt; {&#10;    getNews();&#10;  }, [getNews]);&#10;&#10;  // Фильтрация новостей по поиску&#10;  const filteredNews = news.filter(item =&gt;&#10;    item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||&#10;    item.content.toLowerCase().includes(searchTerm.toLowerCase())&#10;  );&#10;&#10;  const handleNewsClick = (newsItem: NewsItem) =&gt; {&#10;    setSelectedNews(newsItem);&#10;    TelegramWebApp.triggerHapticFeedback('light');&#10;  };&#10;&#10;  const handleCategoryChange = (category: string) =&gt; {&#10;    setSelectedCategory(category);&#10;    TelegramWebApp.triggerHapticFeedback('selection_change');&#10;  };&#10;&#10;  return (&#10;    &lt;ThemeProvider theme={theme}&gt;&#10;      &lt;GlobalStyle theme={theme} /&gt;&#10;      &lt;AppContainer theme={theme}&gt;&#10;        &lt;Header theme={theme}&gt;&#10;          &lt;Title&gt; Gift Propaganda News&lt;/Title&gt;&#10;        &lt;/Header&gt;&#10;&#10;        &lt;SearchBar&#10;          value={searchTerm}&#10;          onChange={setSearchTerm}&#10;          placeholder=&quot;Поиск новостей...&quot;&#10;        /&gt;&#10;&#10;        &lt;CategoryFilter&gt;&#10;          {categories.map(category =&gt; (&#10;            &lt;CategoryButton&#10;              key={category.key}&#10;              $active={selectedCategory === category.key}&#10;              onClick={() =&gt; handleCategoryChange(category.key)}&#10;            &gt;&#10;              {category.label}&#10;            &lt;/CategoryButton&gt;&#10;          ))}&#10;        &lt;/CategoryFilter&gt;&#10;&#10;        {loading &amp;&amp; (&#10;          &lt;LoadingContainer&gt;&#10;            Загрузка новостей...&#10;          &lt;/LoadingContainer&gt;&#10;        )}&#10;&#10;        {error &amp;&amp; (&#10;          &lt;ErrorContainer&gt;&#10;            &lt;div&gt;{error}&lt;/div&gt;&#10;            &lt;RetryButton onClick={getNews}&gt;&#10;              Повторить&#10;            &lt;/RetryButton&gt;&#10;          &lt;/ErrorContainer&gt;&#10;        )}&#10;&#10;        {!loading &amp;&amp; !error &amp;&amp; (&#10;          &lt;NewsList&gt;&#10;            {filteredNews.length === 0 ? (&#10;              &lt;div style={{ textAlign: 'center', padding: '40px 20px', color: 'var(--tg-theme-hint-color, #999999)' }}&gt;&#10;                Новостей не найдено&#10;              &lt;/div&gt;&#10;            ) : (&#10;              filteredNews.map((item) =&gt; (&#10;                &lt;NewsItemCard&#10;                  key={item.id}&#10;                  onClick={() =&gt; handleNewsClick(item)}&#10;                  $isNew={new Date(item.publish_date) &gt; new Date(Date.now() - 24 * 60 * 60 * 1000)}&#10;                &gt;&#10;                  &lt;NewsContent&gt;&#10;                    &lt;NewsTitle&gt;{item.title}&lt;/NewsTitle&gt;&#10;&#10;                    {/* Добавляем поддержку медиа */}&#10;                    {item.media &amp;&amp; (&#10;                      &lt;MediaContainer&gt;&#10;                        {item.media.type === 'photo' &amp;&amp; (&#10;                          &lt;NewsImage&#10;                            src={item.media.url}&#10;                            alt={item.title}&#10;                            loading=&quot;lazy&quot;&#10;                          /&gt;&#10;                        )}&#10;                        {item.media.type === 'video' &amp;&amp; (&#10;                          &lt;NewsVideo&#10;                            src={item.media.url}&#10;                            controls&#10;                            preload=&quot;metadata&quot;&#10;                          /&gt;&#10;                        )}&#10;                      &lt;/MediaContainer&gt;&#10;                    )}&#10;&#10;                    &lt;NewsText&gt;{item.content}&lt;/NewsText&gt;&#10;                    &lt;NewsFooter&gt;&#10;                      &lt;div&gt;&#10;                        &lt;CategoryTag $category={item.category}&gt;&#10;                          {categories.find(c =&gt; c.key === item.category)?.label || item.category}&#10;                        &lt;/CategoryTag&gt;&#10;                        &lt;NewsSource style={{ marginLeft: '8px' }}&gt;&#10;                          {item.source?.name || 'Telegram'}&#10;                        &lt;/NewsSource&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;NewsDate&gt;&#10;                        {formatDate(item.publish_date)}&#10;                      &lt;/NewsDate&gt;&#10;                    &lt;/NewsFooter&gt;&#10;                  &lt;/NewsContent&gt;&#10;                &lt;/NewsItemCard&gt;&#10;              ))&#10;            )}&#10;          &lt;/NewsList&gt;&#10;        )}&#10;&#10;        {selectedNews &amp;&amp; (&#10;          &lt;NewsModal&#10;            news={selectedNews}&#10;            onClose={() =&gt; setSelectedNews(null)}&#10;          /&gt;&#10;        )}&#10;      &lt;/AppContainer&gt;&#10;    &lt;/ThemeProvider&gt;&#10;  );&#10;};&#10;&#10;export default App;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import styled from 'styled-components';&#10;import { fetchNews } from './api/news';&#10;import NewsModal from './components/NewsModal';&#10;import SearchBar from './components/SearchBar';&#10;import TelegramWebApp from './telegram/TelegramWebApp';&#10;&#10;// Типы данных&#10;interface NewsItem {&#10;  id: number;&#10;  title: string;&#10;  content: string;&#10;  link: string;&#10;  publish_date: string;&#10;  category: string;&#10;  image_url?: string;&#10;  video_url?: string;&#10;  reading_time?: number;&#10;  views_count?: number;&#10;  author?: string;&#10;  subtitle?: string;&#10;}&#10;&#10;// Стилизованные компоненты&#10;const AppContainer = styled.div`&#10;  min-height: 100vh;&#10;  background: var(--tg-theme-bg-color, #0f0f0f);&#10;  color: var(--tg-theme-text-color, #ffffff);&#10;  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;&#10;  padding: 0;&#10;  margin: 0;&#10;`;&#10;&#10;const Header = styled.header`&#10;  position: sticky;&#10;  top: 0;&#10;  z-index: 100;&#10;  background: var(--tg-theme-bg-color, #0f0f0f);&#10;  border-bottom: 1px solid var(--tg-theme-hint-color, #333);&#10;  padding: 16px;&#10;  backdrop-filter: blur(10px);&#10;`;&#10;&#10;const Title = styled.h1`&#10;  margin: 0 0 16px 0;&#10;  font-size: 24px;&#10;  font-weight: 600;&#10;  text-align: center;&#10;  color: var(--tg-theme-text-color, #ffffff);&#10;`;&#10;&#10;const CategoryTabs = styled.div`&#10;  display: flex;&#10;  gap: 8px;&#10;  overflow-x: auto;&#10;  padding: 8px 0;&#10;  margin-bottom: 16px;&#10;  &#10;  &amp;::-webkit-scrollbar {&#10;    height: 4px;&#10;  }&#10;  &#10;  &amp;::-webkit-scrollbar-track {&#10;    background: transparent;&#10;  }&#10;  &#10;  &amp;::-webkit-scrollbar-thumb {&#10;    background: var(--tg-theme-hint-color, #333);&#10;    border-radius: 2px;&#10;  }&#10;`;&#10;&#10;const CategoryTab = styled.button&lt;{ $active: boolean }&gt;`&#10;  padding: 8px 16px;&#10;  border: none;&#10;  border-radius: 20px;&#10;  background: ${props =&gt; props.$active &#10;    ? 'var(--tg-theme-button-color, #0088cc)' &#10;    : 'var(--tg-theme-secondary-bg-color, #1a1a1a)'};&#10;  color: ${props =&gt; props.$active &#10;    ? 'var(--tg-theme-button-text-color, #ffffff)' &#10;    : 'var(--tg-theme-text-color, #ffffff)'};&#10;  font-size: 14px;&#10;  font-weight: 500;&#10;  cursor: pointer;&#10;  transition: all 0.2s ease;&#10;  white-space: nowrap;&#10;  min-width: fit-content;&#10;&#10;  &amp;:hover {&#10;    transform: translateY(-1px);&#10;    box-shadow: 0 4px 12px rgba(0, 136, 204, 0.3);&#10;  }&#10;&#10;  &amp;:active {&#10;    transform: translateY(0);&#10;  }&#10;`;&#10;&#10;const NewsContainer = styled.div`&#10;  padding: 0 16px 20px 16px;&#10;  max-width: 800px;&#10;  margin: 0 auto;&#10;`;&#10;&#10;const NewsCard = styled.div&lt;{ $isNew?: boolean }&gt;`&#10;  background: var(--tg-theme-secondary-bg-color, #1a1a1a);&#10;  border: 1px solid var(--tg-theme-hint-color, #333);&#10;  border-radius: 12px;&#10;  padding: 20px;&#10;  margin-bottom: 16px;&#10;  cursor: pointer;&#10;  transition: all 0.2s ease;&#10;  position: relative;&#10;  overflow: hidden;&#10;&#10;  ${props =&gt; props.$isNew &amp;&amp; `&#10;    &amp;::before {&#10;      content: '';&#10;      position: absolute;&#10;      top: 0;&#10;      left: 0;&#10;      width: 4px;&#10;      height: 100%;&#10;      background: var(--tg-theme-button-color, #0088cc);&#10;    }&#10;  `}&#10;&#10;  &amp;:hover {&#10;    transform: translateY(-2px);&#10;    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);&#10;    border-color: var(--tg-theme-button-color, #0088cc);&#10;  }&#10;&#10;  &amp;:active {&#10;    transform: translateY(0);&#10;  }&#10;`;&#10;&#10;const NewsHeader = styled.div`&#10;  display: flex;&#10;  align-items: flex-start;&#10;  gap: 12px;&#10;  margin-bottom: 12px;&#10;`;&#10;&#10;const NewsImage = styled.img`&#10;  width: 80px;&#10;  height: 80px;&#10;  border-radius: 8px;&#10;  object-fit: cover;&#10;  background: var(--tg-theme-hint-color, #333);&#10;  flex-shrink: 0;&#10;`;&#10;&#10;const NewsContent = styled.div`&#10;  flex: 1;&#10;  min-width: 0;&#10;`;&#10;&#10;const NewsTitle = styled.h3`&#10;  margin: 0 0 8px 0;&#10;  font-size: 16px;&#10;  font-weight: 600;&#10;  line-height: 1.4;&#10;  color: var(--tg-theme-text-color, #ffffff);&#10;  display: -webkit-box;&#10;  -webkit-line-clamp: 2;&#10;  -webkit-box-orient: vertical;&#10;  overflow: hidden;&#10;`;&#10;&#10;const NewsPreview = styled.p`&#10;  margin: 0 0 12px 0;&#10;  font-size: 14px;&#10;  line-height: 1.5;&#10;  color: var(--tg-theme-hint-color, #999);&#10;  display: -webkit-box;&#10;  -webkit-line-clamp: 2;&#10;  -webkit-box-orient: vertical;&#10;  overflow: hidden;&#10;`;&#10;&#10;const NewsMetadata = styled.div`&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: space-between;&#10;  gap: 12px;&#10;  margin-top: 12px;&#10;`;&#10;&#10;const NewsInfo = styled.div`&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 12px;&#10;  font-size: 12px;&#10;  color: var(--tg-theme-hint-color, #999);&#10;`;&#10;&#10;const CategoryBadge = styled.span&lt;{ $category: string }&gt;`&#10;  padding: 4px 8px;&#10;  border-radius: 6px;&#10;  font-size: 11px;&#10;  font-weight: 500;&#10;  background: ${props =&gt; getCategoryColor(props.$category)};&#10;  color: #ffffff;&#10;`;&#10;&#10;const ReadingTime = styled.span`&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 4px;&#10;  &#10;  &amp;::before {&#10;    content: '';&#10;  }&#10;`;&#10;&#10;const ViewsCount = styled.span`&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 4px;&#10;  &#10;  &amp;::before {&#10;    content: '️';&#10;  }&#10;`;&#10;&#10;const LoadingSpinner = styled.div`&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  padding: 40px;&#10;  &#10;  &amp;::after {&#10;    content: '';&#10;    width: 32px;&#10;    height: 32px;&#10;    border: 3px solid var(--tg-theme-hint-color, #333);&#10;    border-top: 3px solid var(--tg-theme-button-color, #0088cc);&#10;    border-radius: 50%;&#10;    animation: spin 1s linear infinite;&#10;  }&#10;  &#10;  @keyframes spin {&#10;    0% { transform: rotate(0deg); }&#10;    100% { transform: rotate(360deg); }&#10;  }&#10;`;&#10;&#10;const ErrorMessage = styled.div`&#10;  text-align: center;&#10;  padding: 40px 20px;&#10;  color: var(--tg-theme-destructive-text-color, #ff4444);&#10;  font-size: 16px;&#10;`;&#10;&#10;const EmptyState = styled.div`&#10;  text-align: center;&#10;  padding: 60px 20px;&#10;  color: var(--tg-theme-hint-color, #999);&#10;  &#10;  h3 {&#10;    margin: 0 0 8px 0;&#10;    font-size: 18px;&#10;    color: var(--tg-theme-text-color, #ffffff);&#10;  }&#10;  &#10;  p {&#10;    margin: 0;&#10;    font-size: 14px;&#10;  }&#10;`;&#10;&#10;// Функция для получения цвета категории&#10;function getCategoryColor(category: string): string {&#10;  const colors: Record&lt;string, string&gt; = {&#10;    'gifts': '#ff6b6b',&#10;    'crypto': '#4ecdc4',&#10;    'tech': '#45b7d1',&#10;    'community': '#96ceb4',&#10;    'gaming': '#feca57',&#10;    'news': '#ff9ff3',&#10;    'default': '#6c5ce7'&#10;  };&#10;  return colors[category] || colors.default;&#10;}&#10;&#10;// Функция для форматирования времени&#10;function formatTimeAgo(dateString: string): string {&#10;  const now = new Date();&#10;  const date = new Date(dateString);&#10;  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);&#10;  &#10;  if (diffInSeconds &lt; 60) return 'только что';&#10;  if (diffInSeconds &lt; 3600) return `${Math.floor(diffInSeconds / 60)} мин назад`;&#10;  if (diffInSeconds &lt; 86400) return `${Math.floor(diffInSeconds / 3600)} ч назад`;&#10;  return `${Math.floor(diffInSeconds / 86400)} дн назад`;&#10;}&#10;&#10;// Основной компонент&#10;const App: React.FC = () =&gt; {&#10;  const [news, setNews] = useState&lt;NewsItem[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [selectedCategory, setSelectedCategory] = useState('all');&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [selectedNews, setSelectedNews] = useState&lt;NewsItem | null&gt;(null);&#10;&#10;  const categories = [&#10;    { id: 'all', name: 'Все' },&#10;    { id: 'gifts', name: 'Подарки' },&#10;    { id: 'crypto', name: 'Крипто' },&#10;    { id: 'tech', name: 'Технологии' },&#10;    { id: 'community', name: 'Сообщество' },&#10;    { id: 'gaming', name: 'Игры' }&#10;  ];&#10;&#10;  useEffect(() =&gt; {&#10;    TelegramWebApp.init();&#10;  }, []);&#10;&#10;  const getNews = async () =&gt; {&#10;    try {&#10;      setLoading(true);&#10;      setError(null);&#10;      const response = await fetchNews(selectedCategory === 'all' ? undefined : selectedCategory);&#10;      setNews(response.data);&#10;    } catch (err) {&#10;      console.error('Ошибка при загрузке новостей:', err);&#10;      setError('Не удалось загрузить новости. Попробуйте еще раз.');&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    getNews();&#10;  }, [selectedCategory]);&#10;&#10;  const handleNewsClick = (newsItem: NewsItem) =&gt; {&#10;    TelegramWebApp.triggerHapticFeedback('impact');&#10;    setSelectedNews(newsItem);&#10;  };&#10;&#10;  const handleCategoryChange = (categoryId: string) =&gt; {&#10;    TelegramWebApp.triggerHapticFeedback('impact');&#10;    setSelectedCategory(categoryId);&#10;  };&#10;&#10;  const filteredNews = news.filter(item =&gt;&#10;    item.title.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;    item.content.toLowerCase().includes(searchQuery.toLowerCase())&#10;  );&#10;&#10;  const isNewNews = (dateString: string): boolean =&gt; {&#10;    const now = new Date();&#10;    const date = new Date(dateString);&#10;    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);&#10;    return diffInHours &lt; 24;&#10;  };&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;AppContainer&gt;&#10;        &lt;Header&gt;&#10;          &lt;Title&gt;Новости от Telegram&lt;/Title&gt;&#10;        &lt;/Header&gt;&#10;        &lt;LoadingSpinner /&gt;&#10;      &lt;/AppContainer&gt;&#10;    );&#10;  }&#10;&#10;  if (error) {&#10;    return (&#10;      &lt;AppContainer&gt;&#10;        &lt;Header&gt;&#10;          &lt;Title&gt;Новости от Telegram&lt;/Title&gt;&#10;        &lt;/Header&gt;&#10;        &lt;ErrorMessage&gt;{error}&lt;/ErrorMessage&gt;&#10;      &lt;/AppContainer&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;AppContainer&gt;&#10;      &lt;Header&gt;&#10;        &lt;Title&gt;Новости от Telegram&lt;/Title&gt;&#10;        &#10;        &lt;SearchBar&#10;          value={searchQuery}&#10;          onChange={setSearchQuery}&#10;          placeholder=&quot;Поиск новостей...&quot;&#10;        /&gt;&#10;        &#10;        &lt;CategoryTabs&gt;&#10;          {categories.map(category =&gt; (&#10;            &lt;CategoryTab&#10;              key={category.id}&#10;              $active={selectedCategory === category.id}&#10;              onClick={() =&gt; handleCategoryChange(category.id)}&#10;            &gt;&#10;              {category.name}&#10;            &lt;/CategoryTab&gt;&#10;          ))}&#10;        &lt;/CategoryTabs&gt;&#10;      &lt;/Header&gt;&#10;&#10;      &lt;NewsContainer&gt;&#10;        {filteredNews.length === 0 ? (&#10;          &lt;EmptyState&gt;&#10;            &lt;h3&gt;Новостей не найдено&lt;/h3&gt;&#10;            &lt;p&gt;Попробуйте изменить категорию или поисковый запрос&lt;/p&gt;&#10;          &lt;/EmptyState&gt;&#10;        ) : (&#10;          filteredNews.map(item =&gt; (&#10;            &lt;NewsCard&#10;              key={item.id}&#10;              $isNew={isNewNews(item.publish_date)}&#10;              onClick={() =&gt; handleNewsClick(item)}&#10;            &gt;&#10;              &lt;NewsHeader&gt;&#10;                {item.image_url &amp;&amp; (&#10;                  &lt;NewsImage &#10;                    src={item.image_url} &#10;                    alt={item.title}&#10;                    onError={(e) =&gt; {&#10;                      e.currentTarget.style.display = 'none';&#10;                    }}&#10;                  /&gt;&#10;                )}&#10;                &lt;NewsContent&gt;&#10;                  &lt;NewsTitle&gt;{item.title}&lt;/NewsTitle&gt;&#10;                  &lt;NewsPreview&gt;{item.content}&lt;/NewsPreview&gt;&#10;                &lt;/NewsContent&gt;&#10;              &lt;/NewsHeader&gt;&#10;              &#10;              &lt;NewsMetadata&gt;&#10;                &lt;NewsInfo&gt;&#10;                  &lt;CategoryBadge $category={item.category}&gt;&#10;                    {categories.find(cat =&gt; cat.id === item.category)?.name || item.category}&#10;                  &lt;/CategoryBadge&gt;&#10;                  &#10;                  &lt;span&gt;{formatTimeAgo(item.publish_date)}&lt;/span&gt;&#10;                  &#10;                  {item.reading_time &amp;&amp; (&#10;                    &lt;ReadingTime&gt;{item.reading_time} мин&lt;/ReadingTime&gt;&#10;                  )}&#10;                  &#10;                  {item.views_count !== undefined &amp;&amp; (&#10;                    &lt;ViewsCount&gt;{item.views_count}&lt;/ViewsCount&gt;&#10;                  )}&#10;                &lt;/NewsInfo&gt;&#10;              &lt;/NewsMetadata&gt;&#10;            &lt;/NewsCard&gt;&#10;          ))&#10;        )}&#10;      &lt;/NewsContainer&gt;&#10;&#10;      {selectedNews &amp;&amp; (&#10;        &lt;NewsModal&#10;          news={selectedNews}&#10;          isOpen={!!selectedNews}&#10;          onClose={() =&gt; setSelectedNews(null)}&#10;        /&gt;&#10;      )}&#10;    &lt;/AppContainer&gt;&#10;  );&#10;};&#10;&#10;export default App;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/giftpropaganda-frontend/src/api/news.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/giftpropaganda-frontend/src/api/news.ts" />
              <option name="originalContent" value="import axios from 'axios';&#10;&#10;// Определяем API URL в зависимости от окружения&#10;const API_URL = process.env.NODE_ENV === 'production'&#10;  ? 'https://giftpropaganda.onrender.com/api/news/'&#10;  : 'http://localhost:8000/api/news/';&#10;&#10;export interface NewsItem {&#10;  id: number;&#10;  title: string;&#10;  content: string;&#10;  link: string;&#10;  publish_date: string;&#10;  category: string;&#10;  source?: {&#10;    name: string;&#10;    type: string;&#10;  };&#10;}&#10;&#10;export interface NewsResponse {&#10;  status: string;&#10;  data: NewsItem[];&#10;  message: string;&#10;}&#10;&#10;export const fetchNews = async (category?: string): Promise&lt;NewsResponse&gt; =&gt; {&#10;  try {&#10;    const url = category ? `${API_URL}?category=${category}` : API_URL;&#10;&#10;    const response = await axios.get&lt;NewsResponse&gt;(url, {&#10;      headers: {&#10;        'ngrok-skip-browser-warning': 'true',&#10;        'Content-Type': 'application/json',&#10;        'Accept': 'application/json'&#10;      },&#10;      timeout: 10000 // 10 секунд таймаут&#10;    });&#10;&#10;    console.log('API response:', response.data);&#10;    return response.data;&#10;  } catch (error: any) {&#10;    console.error('Ошибка при загрузке новостей:', error);&#10;&#10;    // Возвращаем более детальную информацию об ошибке&#10;    let errorMessage = 'Ошибка загрузки новостей';&#10;    if (error.response) {&#10;      errorMessage = `Ошибка сервера: ${error.response.status}`;&#10;    } else if (error.request) {&#10;      errorMessage = 'Нет ответа от сервера';&#10;    }&#10;&#10;    return {&#10;      status: 'error',&#10;      data: [],&#10;      message: errorMessage&#10;    };&#10;  }&#10;};" />
              <option name="updatedContent" value="import axios from 'axios';&#10;&#10;// Определяем API URL в зависимости от окружения&#10;const API_URL = process.env.NODE_ENV === 'production'&#10;  ? 'https://giftpropaganda.onrender.com/api/news/'&#10;  : 'http://localhost:8000/api/news/';&#10;&#10;export interface MediaItem {&#10;  type: 'photo' | 'video';&#10;  url: string;&#10;  thumbnail?: string;&#10;  width?: number;&#10;  height?: number;&#10;}&#10;&#10;export interface NewsItem {&#10;  id: number;&#10;  title: string;&#10;  content: string;&#10;  link: string;&#10;  publish_date: string;&#10;  category: string;&#10;  media?: MediaItem; // Добавляем поддержку медиа&#10;  source?: {&#10;    name: string;&#10;    type: string;&#10;  };&#10;}&#10;&#10;export interface NewsResponse {&#10;  status: string;&#10;  data: NewsItem[];&#10;  message: string;&#10;}&#10;&#10;export const fetchNews = async (category?: string): Promise&lt;NewsResponse&gt; =&gt; {&#10;  try {&#10;    const url = category ? `${API_URL}?category=${category}` : API_URL;&#10;&#10;    const response = await axios.get&lt;NewsResponse&gt;(url, {&#10;      headers: {&#10;        'ngrok-skip-browser-warning': 'true',&#10;        'Content-Type': 'application/json',&#10;        'Accept': 'application/json'&#10;      },&#10;      timeout: 10000 // 10 секунд таймаут&#10;    });&#10;&#10;    console.log('API response:', response.data);&#10;    return response.data;&#10;  } catch (error: any) {&#10;    console.error('Ошибка при загрузке новостей:', error);&#10;&#10;    // Возвращаем более детальную информацию об ошибке&#10;    let errorMessage = 'Ошибка загрузки новостей';&#10;    if (error.response) {&#10;      errorMessage = `Ошибка сервера: ${error.response.status}`;&#10;    } else if (error.request) {&#10;      errorMessage = 'Нет ответа от сервера';&#10;    }&#10;&#10;    return {&#10;      status: 'error',&#10;      data: [],&#10;      message: errorMessage&#10;    };&#10;  }&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/giftpropaganda-frontend/src/components/NewsModal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/giftpropaganda-frontend/src/components/NewsModal.tsx" />
              <option name="originalContent" value="import React, { useEffect } from 'react';&#10;import styled from 'styled-components';&#10;import { NewsItem } from '../api/news';&#10;import TelegramWebApp from '../telegram/TelegramWebApp';&#10;&#10;const ModalOverlay = styled.div&lt;{ isOpen: boolean }&gt;`&#10;  position: fixed;&#10;  top: 0;&#10;  left: 0;&#10;  right: 0;&#10;  bottom: 0;&#10;  background-color: rgba(0, 0, 0, 0.5);&#10;  display: ${props =&gt; props.isOpen ? 'flex' : 'none'};&#10;  justify-content: center;&#10;  align-items: flex-end;&#10;  z-index: 1000;&#10;`;&#10;&#10;const ModalContent = styled.div&lt;{ isOpen: boolean }&gt;`&#10;  background-color: var(--tg-theme-bg-color, #ffffff);&#10;  width: 100%;&#10;  max-height: 80vh;&#10;  border-radius: 16px 16px 0 0;&#10;  transform: ${props =&gt; props.isOpen ? 'translateY(0)' : 'translateY(100%)'};&#10;  transition: transform 0.3s ease-out;&#10;  overflow: hidden;&#10;  display: flex;&#10;  flex-direction: column;&#10;`;&#10;&#10;const ModalHeader = styled.div`&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  padding: 16px 20px;&#10;  border-bottom: 1px solid var(--tg-theme-hint-color, #e0e0e0);&#10;  background-color: var(--tg-theme-secondary-bg-color, #f8f9fa);&#10;`;&#10;&#10;const ModalTitle = styled.h3`&#10;  color: var(--tg-theme-text-color, #000000);&#10;  font-size: 18px;&#10;  font-weight: 600;&#10;  margin: 0;&#10;  flex: 1;&#10;  line-height: 1.3;&#10;`;&#10;&#10;const CloseButton = styled.button`&#10;  background: none;&#10;  border: none;&#10;  font-size: 24px;&#10;  color: var(--tg-theme-hint-color, #999999);&#10;  cursor: pointer;&#10;  padding: 4px;&#10;  margin-left: 12px;&#10;  border-radius: 50%;&#10;  width: 32px;&#10;  height: 32px;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  &#10;  &amp;:active {&#10;    background-color: var(--tg-theme-hint-color, #e0e0e0);&#10;    transform: scale(0.95);&#10;  }&#10;`;&#10;&#10;const ModalBody = styled.div`&#10;  flex: 1;&#10;  overflow-y: auto;&#10;  padding: 20px;&#10;`;&#10;&#10;const NewsContent = styled.div`&#10;  line-height: 1.6;&#10;  color: var(--tg-theme-text-color, #000000);&#10;  font-size: 16px;&#10;  white-space: pre-wrap;&#10;  word-wrap: break-word;&#10;`;&#10;&#10;const NewsFooter = styled.div`&#10;  padding: 16px 20px;&#10;  border-top: 1px solid var(--tg-theme-hint-color, #e0e0e0);&#10;  background-color: var(--tg-theme-secondary-bg-color, #f8f9fa);&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;`;&#10;&#10;const NewsSource = styled.div`&#10;  color: var(--tg-theme-hint-color, #999999);&#10;  font-size: 14px;&#10;`;&#10;&#10;const NewsDate = styled.div`&#10;  color: var(--tg-theme-hint-color, #999999);&#10;  font-size: 14px;&#10;`;&#10;&#10;const CategoryTag = styled.span&lt;{ category: string }&gt;`&#10;  background-color: ${props =&gt; getCategoryColor(props.category)};&#10;  color: white;&#10;  padding: 4px 12px;&#10;  border-radius: 16px;&#10;  font-size: 12px;&#10;  font-weight: 500;&#10;  text-transform: uppercase;&#10;  margin-bottom: 12px;&#10;  display: inline-block;&#10;`;&#10;&#10;// Функция для получения цвета категории&#10;const getCategoryColor = (category: string): string =&gt; {&#10;  const colors: { [key: string]: string } = {&#10;    gifts: '#FF6B6B',&#10;    crypto: '#4ECDC4',&#10;    nft: '#45B7D1',&#10;    tech: '#96CEB4',&#10;    community: '#FECA57',&#10;    general: '#DDA0DD'&#10;  };&#10;  return colors[category] || colors.general;&#10;};&#10;&#10;// Функция для форматирования даты&#10;const formatFullDate = (dateString: string): string =&gt; {&#10;  const date = new Date(dateString);&#10;  return date.toLocaleDateString('ru-RU', {&#10;    year: 'numeric',&#10;    month: 'long',&#10;    day: 'numeric',&#10;    hour: '2-digit',&#10;    minute: '2-digit'&#10;  });&#10;};&#10;&#10;interface NewsModalProps {&#10;  news: NewsItem | null;&#10;  onClose: () =&gt; void;&#10;}&#10;&#10;const NewsModal: React.FC&lt;NewsModalProps&gt; = ({ news, onClose }) =&gt; {&#10;  const isOpen = !!news;&#10;&#10;  useEffect(() =&gt; {&#10;    if (isOpen) {&#10;      // Блокируем скролл основной страницы&#10;      document.body.style.overflow = 'hidden';&#10;      TelegramWebApp.triggerHapticFeedback('medium');&#10;    } else {&#10;      document.body.style.overflow = 'unset';&#10;    }&#10;&#10;    return () =&gt; {&#10;      document.body.style.overflow = 'unset';&#10;    };&#10;  }, [isOpen]);&#10;&#10;  const handleOverlayClick = (e: React.MouseEvent) =&gt; {&#10;    if (e.target === e.currentTarget) {&#10;      onClose();&#10;    }&#10;  };&#10;&#10;  const handleClose = () =&gt; {&#10;    TelegramWebApp.triggerHapticFeedback('light');&#10;    onClose();&#10;  };&#10;&#10;  if (!news) return null;&#10;&#10;  return (&#10;    &lt;ModalOverlay isOpen={isOpen} onClick={handleOverlayClick}&gt;&#10;      &lt;ModalContent isOpen={isOpen}&gt;&#10;        &lt;ModalHeader&gt;&#10;          &lt;ModalTitle&gt;{news.title}&lt;/ModalTitle&gt;&#10;          &lt;CloseButton onClick={handleClose}&gt;×&lt;/CloseButton&gt;&#10;        &lt;/ModalHeader&gt;&#10;&#10;        &lt;ModalBody&gt;&#10;          &lt;CategoryTag category={news.category}&gt;&#10;            {news.category}&#10;          &lt;/CategoryTag&gt;&#10;          &lt;NewsContent&gt;{news.content}&lt;/NewsContent&gt;&#10;        &lt;/ModalBody&gt;&#10;&#10;        &lt;NewsFooter&gt;&#10;          &lt;NewsSource&gt;&#10;            Источник: {news.source?.name || 'Telegram'}&#10;          &lt;/NewsSource&gt;&#10;          &lt;NewsDate&gt;&#10;            {formatFullDate(news.publish_date)}&#10;          &lt;/NewsDate&gt;&#10;        &lt;/NewsFooter&gt;&#10;      &lt;/ModalContent&gt;&#10;    &lt;/ModalOverlay&gt;&#10;  );&#10;};&#10;&#10;export default NewsModal;&#10;&#10;" />
              <option name="updatedContent" value="import React, { useEffect } from 'react';&#10;import styled from 'styled-components';&#10;import TelegramWebApp from '../telegram/TelegramWebApp';&#10;&#10;interface NewsItem {&#10;  id: number;&#10;  title: string;&#10;  content: string;&#10;  link: string;&#10;  publish_date: string;&#10;  category: string;&#10;  image_url?: string;&#10;  video_url?: string;&#10;  reading_time?: number;&#10;  views_count?: number;&#10;  author?: string;&#10;  subtitle?: string;&#10;}&#10;&#10;interface NewsModalProps {&#10;  news: NewsItem;&#10;  isOpen: boolean;&#10;  onClose: () =&gt; void;&#10;}&#10;&#10;const ModalOverlay = styled.div&lt;{ $isOpen: boolean }&gt;`&#10;  position: fixed;&#10;  top: 0;&#10;  left: 0;&#10;  right: 0;&#10;  bottom: 0;&#10;  background: rgba(0, 0, 0, 0.8);&#10;  backdrop-filter: blur(10px);&#10;  z-index: 1000;&#10;  opacity: ${props =&gt; props.$isOpen ? 1 : 0};&#10;  visibility: ${props =&gt; props.$isOpen ? 'visible' : 'hidden'};&#10;  transition: all 0.3s ease;&#10;`;&#10;&#10;const ModalContainer = styled.div&lt;{ $isOpen: boolean }&gt;`&#10;  position: fixed;&#10;  top: 0;&#10;  right: 0;&#10;  bottom: 0;&#10;  left: 0;&#10;  background: var(--tg-theme-bg-color, #0f0f0f);&#10;  color: var(--tg-theme-text-color, #ffffff);&#10;  transform: translateY(${props =&gt; props.$isOpen ? '0' : '100%'});&#10;  transition: transform 0.3s ease;&#10;  overflow-y: auto;&#10;  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;&#10;`;&#10;&#10;const ModalHeader = styled.header`&#10;  position: sticky;&#10;  top: 0;&#10;  background: var(--tg-theme-bg-color, #0f0f0f);&#10;  border-bottom: 1px solid var(--tg-theme-hint-color, #333);&#10;  padding: 16px;&#10;  z-index: 100;&#10;  backdrop-filter: blur(10px);&#10;`;&#10;&#10;const HeaderControls = styled.div`&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  margin-bottom: 12px;&#10;`;&#10;&#10;const CloseButton = styled.button`&#10;  background: var(--tg-theme-secondary-bg-color, #1a1a1a);&#10;  border: 1px solid var(--tg-theme-hint-color, #333);&#10;  border-radius: 50%;&#10;  width: 40px;&#10;  height: 40px;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  cursor: pointer;&#10;  color: var(--tg-theme-text-color, #ffffff);&#10;  font-size: 18px;&#10;  transition: all 0.2s ease;&#10;&#10;  &amp;:hover {&#10;    background: var(--tg-theme-hint-color, #333);&#10;    transform: scale(1.05);&#10;  }&#10;&#10;  &amp;:active {&#10;    transform: scale(0.95);&#10;  }&#10;`;&#10;&#10;const ShareButton = styled.button`&#10;  background: var(--tg-theme-button-color, #0088cc);&#10;  border: none;&#10;  border-radius: 20px;&#10;  padding: 8px 16px;&#10;  color: var(--tg-theme-button-text-color, #ffffff);&#10;  font-size: 14px;&#10;  font-weight: 500;&#10;  cursor: pointer;&#10;  transition: all 0.2s ease;&#10;&#10;  &amp;:hover {&#10;    transform: translateY(-1px);&#10;    box-shadow: 0 4px 12px rgba(0, 136, 204, 0.3);&#10;  }&#10;&#10;  &amp;:active {&#10;    transform: translateY(0);&#10;  }&#10;`;&#10;&#10;const ArticleHeader = styled.div`&#10;  margin-bottom: 16px;&#10;`;&#10;&#10;const CategoryBadge = styled.span&lt;{ $category: string }&gt;`&#10;  display: inline-block;&#10;  padding: 6px 12px;&#10;  border-radius: 20px;&#10;  font-size: 12px;&#10;  font-weight: 600;&#10;  background: ${props =&gt; getCategoryColor(props.$category)};&#10;  color: #ffffff;&#10;  margin-bottom: 12px;&#10;`;&#10;&#10;const ArticleTitle = styled.h1`&#10;  margin: 0 0 8px 0;&#10;  font-size: 24px;&#10;  font-weight: 700;&#10;  line-height: 1.3;&#10;  color: var(--tg-theme-text-color, #ffffff);&#10;`;&#10;&#10;const ArticleSubtitle = styled.h2`&#10;  margin: 0 0 16px 0;&#10;  font-size: 18px;&#10;  font-weight: 400;&#10;  line-height: 1.4;&#10;  color: var(--tg-theme-hint-color, #999);&#10;`;&#10;&#10;const ArticleMetadata = styled.div`&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 16px;&#10;  font-size: 14px;&#10;  color: var(--tg-theme-hint-color, #999);&#10;  padding-bottom: 16px;&#10;  border-bottom: 1px solid var(--tg-theme-hint-color, #333);&#10;`;&#10;&#10;const MetadataItem = styled.span`&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 6px;&#10;`;&#10;&#10;const ArticleContent = styled.div`&#10;  padding: 24px 16px;&#10;  max-width: 700px;&#10;  margin: 0 auto;&#10;`;&#10;&#10;const ArticleImage = styled.img`&#10;  width: 100%;&#10;  height: auto;&#10;  border-radius: 12px;&#10;  margin: 20px 0;&#10;  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);&#10;`;&#10;&#10;const VideoContainer = styled.div`&#10;  width: 100%;&#10;  margin: 20px 0;&#10;  border-radius: 12px;&#10;  overflow: hidden;&#10;  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);&#10;`;&#10;&#10;const ArticleText = styled.div`&#10;  font-size: 16px;&#10;  line-height: 1.6;&#10;  color: var(--tg-theme-text-color, #ffffff);&#10;  &#10;  p {&#10;    margin: 0 0 16px 0;&#10;  }&#10;  &#10;  a {&#10;    color: var(--tg-theme-link-color, #0088cc);&#10;    text-decoration: none;&#10;    &#10;    &amp;:hover {&#10;      text-decoration: underline;&#10;    }&#10;  }&#10;`;&#10;&#10;const SourceLink = styled.div`&#10;  margin-top: 32px;&#10;  padding: 16px;&#10;  background: var(--tg-theme-secondary-bg-color, #1a1a1a);&#10;  border: 1px solid var(--tg-theme-hint-color, #333);&#10;  border-radius: 12px;&#10;  font-size: 14px;&#10;  color: var(--tg-theme-hint-color, #999);&#10;  text-align: center;&#10;`;&#10;&#10;const SourceLinkButton = styled.button`&#10;  background: transparent;&#10;  border: 1px solid var(--tg-theme-hint-color, #333);&#10;  border-radius: 8px;&#10;  padding: 8px 16px;&#10;  color: var(--tg-theme-text-color, #ffffff);&#10;  font-size: 14px;&#10;  cursor: pointer;&#10;  margin-top: 8px;&#10;  transition: all 0.2s ease;&#10;&#10;  &amp;:hover {&#10;    border-color: var(--tg-theme-button-color, #0088cc);&#10;    color: var(--tg-theme-button-color, #0088cc);&#10;  }&#10;`;&#10;&#10;const RecommendationsSection = styled.div`&#10;  margin-top: 32px;&#10;  padding: 20px 16px;&#10;  background: var(--tg-theme-secondary-bg-color, #1a1a1a);&#10;  border-top: 1px solid var(--tg-theme-hint-color, #333);&#10;`;&#10;&#10;const RecommendationsTitle = styled.h3`&#10;  margin: 0 0 16px 0;&#10;  font-size: 18px;&#10;  font-weight: 600;&#10;  color: var(--tg-theme-text-color, #ffffff);&#10;  text-align: center;&#10;`;&#10;&#10;const RecommendationCard = styled.div`&#10;  background: var(--tg-theme-bg-color, #0f0f0f);&#10;  border: 1px solid var(--tg-theme-hint-color, #333);&#10;  border-radius: 8px;&#10;  padding: 12px;&#10;  margin-bottom: 8px;&#10;  cursor: pointer;&#10;  transition: all 0.2s ease;&#10;&#10;  &amp;:hover {&#10;    border-color: var(--tg-theme-button-color, #0088cc);&#10;    transform: translateY(-1px);&#10;  }&#10;`;&#10;&#10;const RecommendationTitle = styled.h4`&#10;  margin: 0 0 4px 0;&#10;  font-size: 14px;&#10;  font-weight: 500;&#10;  color: var(--tg-theme-text-color, #ffffff);&#10;  line-height: 1.3;&#10;`;&#10;&#10;const RecommendationMeta = styled.div`&#10;  font-size: 12px;&#10;  color: var(--tg-theme-hint-color, #999);&#10;`;&#10;&#10;function getCategoryColor(category: string): string {&#10;  const colors: Record&lt;string, string&gt; = {&#10;    'gifts': '#ff6b6b',&#10;    'crypto': '#4ecdc4',&#10;    'tech': '#45b7d1',&#10;    'community': '#96ceb4',&#10;    'gaming': '#feca57',&#10;    'news': '#ff9ff3',&#10;    'default': '#6c5ce7'&#10;  };&#10;  return colors[category] || colors.default;&#10;}&#10;&#10;function formatTimeAgo(dateString: string): string {&#10;  const now = new Date();&#10;  const date = new Date(dateString);&#10;  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);&#10;  &#10;  if (diffInSeconds &lt; 60) return 'только что';&#10;  if (diffInSeconds &lt; 3600) return `${Math.floor(diffInSeconds / 60)} мин назад`;&#10;  if (diffInSeconds &lt; 86400) return `${Math.floor(diffInSeconds / 3600)} ч назад`;&#10;  return `${Math.floor(diffInSeconds / 86400)} дн назад`;&#10;}&#10;&#10;function estimateReadingTime(text: string): number {&#10;  const wordsPerMinute = 200;&#10;  const words = text.split(' ').length;&#10;  return Math.ceil(words / wordsPerMinute);&#10;}&#10;&#10;const NewsModal: React.FC&lt;NewsModalProps&gt; = ({ news, isOpen, onClose }) =&gt; {&#10;  useEffect(() =&gt; {&#10;    if (isOpen) {&#10;      TelegramWebApp.triggerHapticFeedback('notification');&#10;    }&#10;  }, [isOpen]);&#10;&#10;  const handleShare = () =&gt; {&#10;    TelegramWebApp.triggerHapticFeedback('impact');&#10;    if (navigator.share) {&#10;      navigator.share({&#10;        title: news.title,&#10;        text: news.content.substring(0, 100) + '...',&#10;        url: news.link&#10;      });&#10;    } else {&#10;      // Fallback для старых браузеров&#10;      navigator.clipboard.writeText(news.link);&#10;      TelegramWebApp.showAlert('Ссылка скопирована в буфер обмена');&#10;    }&#10;  };&#10;&#10;  const handleSourceClick = () =&gt; {&#10;    TelegramWebApp.triggerHapticFeedback('impact');&#10;    TelegramWebApp.openLink(news.link);&#10;  };&#10;&#10;  const handleClose = () =&gt; {&#10;    TelegramWebApp.triggerHapticFeedback('impact');&#10;    onClose();&#10;  };&#10;&#10;  if (!isOpen) return null;&#10;&#10;  const readingTime = news.reading_time || estimateReadingTime(news.content);&#10;&#10;  return (&#10;    &lt;ModalOverlay $isOpen={isOpen} onClick={handleClose}&gt;&#10;      &lt;ModalContainer $isOpen={isOpen} onClick={(e) =&gt; e.stopPropagation()}&gt;&#10;        &lt;ModalHeader&gt;&#10;          &lt;HeaderControls&gt;&#10;            &lt;CloseButton onClick={handleClose}&gt;×&lt;/CloseButton&gt;&#10;            &lt;ShareButton onClick={handleShare}&gt;Поделиться&lt;/ShareButton&gt;&#10;          &lt;/HeaderControls&gt;&#10;          &#10;          &lt;ArticleHeader&gt;&#10;            &lt;CategoryBadge $category={news.category}&gt;&#10;              {news.category.toUpperCase()}&#10;            &lt;/CategoryBadge&gt;&#10;            &#10;            &lt;ArticleTitle&gt;{news.title}&lt;/ArticleTitle&gt;&#10;            &#10;            {news.subtitle &amp;&amp; (&#10;              &lt;ArticleSubtitle&gt;{news.subtitle}&lt;/ArticleSubtitle&gt;&#10;            )}&#10;            &#10;            &lt;ArticleMetadata&gt;&#10;              &lt;MetadataItem&gt;&#10;                 {formatTimeAgo(news.publish_date)}&#10;              &lt;/MetadataItem&gt;&#10;              &#10;              &lt;MetadataItem&gt;&#10;                 {readingTime} мин чтения&#10;              &lt;/MetadataItem&gt;&#10;              &#10;              {news.views_count !== undefined &amp;&amp; (&#10;                &lt;MetadataItem&gt;&#10;                  ️ {news.views_count} просмотров&#10;                &lt;/MetadataItem&gt;&#10;              )}&#10;              &#10;              {news.author &amp;&amp; (&#10;                &lt;MetadataItem&gt;&#10;                   {news.author}&#10;                &lt;/MetadataItem&gt;&#10;              )}&#10;            &lt;/ArticleMetadata&gt;&#10;          &lt;/ArticleHeader&gt;&#10;        &lt;/ModalHeader&gt;&#10;&#10;        &lt;ArticleContent&gt;&#10;          {news.image_url &amp;&amp; (&#10;            &lt;ArticleImage &#10;              src={news.image_url} &#10;              alt={news.title}&#10;              onError={(e) =&gt; {&#10;                e.currentTarget.style.display = 'none';&#10;              }}&#10;            /&gt;&#10;          )}&#10;&#10;          {news.video_url &amp;&amp; (&#10;            &lt;VideoContainer&gt;&#10;              &lt;video &#10;                controls &#10;                style={{ width: '100%', height: 'auto' }}&#10;                poster={news.image_url}&#10;              &gt;&#10;                &lt;source src={news.video_url} type=&quot;video/mp4&quot; /&gt;&#10;                Ваш браузер не поддерживает видео.&#10;              &lt;/video&gt;&#10;            &lt;/VideoContainer&gt;&#10;          )}&#10;&#10;          &lt;ArticleText&gt;&#10;            {news.content.split('\n').map((paragraph, index) =&gt; &#10;              paragraph.trim() &amp;&amp; (&#10;                &lt;p key={index}&gt;{paragraph}&lt;/p&gt;&#10;              )&#10;            )}&#10;          &lt;/ArticleText&gt;&#10;&#10;          &lt;SourceLink&gt;&#10;            Источник&#10;            &lt;SourceLinkButton onClick={handleSourceClick}&gt;&#10;              Читать оригинал&#10;            &lt;/SourceLinkButton&gt;&#10;          &lt;/SourceLink&gt;&#10;        &lt;/ArticleContent&gt;&#10;&#10;        &lt;RecommendationsSection&gt;&#10;          &lt;RecommendationsTitle&gt;Рекомендуем к прочтению&lt;/RecommendationsTitle&gt;&#10;          &#10;          {/* Здесь можно добавить рекомендованные статьи */}&#10;          &lt;RecommendationCard&gt;&#10;            &lt;RecommendationTitle&gt;&#10;              Похожие новости появятся здесь&#10;            &lt;/RecommendationTitle&gt;&#10;            &lt;RecommendationMeta&gt;&#10;              Система рекомендаций в разработке&#10;            &lt;/RecommendationMeta&gt;&#10;          &lt;/RecommendationCard&gt;&#10;        &lt;/RecommendationsSection&gt;&#10;      &lt;/ModalContainer&gt;&#10;    &lt;/ModalOverlay&gt;&#10;  );&#10;};&#10;&#10;export default NewsModal;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/giftpropaganda-frontend/src/components/SearchBar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/giftpropaganda-frontend/src/components/SearchBar.tsx" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import styled from 'styled-components';&#10;&#10;interface SearchBarProps {&#10;  value: string;&#10;  onChange: (value: string) =&gt; void;&#10;  placeholder?: string;&#10;}&#10;&#10;const SearchContainer = styled.div`&#10;  position: relative;&#10;  margin-bottom: 16px;&#10;`;&#10;&#10;const SearchInput = styled.input`&#10;  width: 100%;&#10;  padding: 12px 16px 12px 44px;&#10;  background: var(--tg-theme-secondary-bg-color, #1a1a1a);&#10;  border: 1px solid var(--tg-theme-hint-color, #333);&#10;  border-radius: 12px;&#10;  color: var(--tg-theme-text-color, #ffffff);&#10;  font-size: 16px;&#10;  font-family: inherit;&#10;  transition: all 0.2s ease;&#10;  box-sizing: border-box;&#10;&#10;  &amp;:focus {&#10;    outline: none;&#10;    border-color: var(--tg-theme-button-color, #0088cc);&#10;    box-shadow: 0 0 0 2px rgba(0, 136, 204, 0.2);&#10;  }&#10;&#10;  &amp;::placeholder {&#10;    color: var(--tg-theme-hint-color, #999);&#10;  }&#10;`;&#10;&#10;const SearchIcon = styled.div`&#10;  position: absolute;&#10;  left: 16px;&#10;  top: 50%;&#10;  transform: translateY(-50%);&#10;  color: var(--tg-theme-hint-color, #999);&#10;  font-size: 16px;&#10;  pointer-events: none;&#10;`;&#10;&#10;const ClearButton = styled.button`&#10;  position: absolute;&#10;  right: 12px;&#10;  top: 50%;&#10;  transform: translateY(-50%);&#10;  background: none;&#10;  border: none;&#10;  color: var(--tg-theme-hint-color, #999);&#10;  font-size: 18px;&#10;  cursor: pointer;&#10;  padding: 4px;&#10;  border-radius: 50%;&#10;  transition: all 0.2s ease;&#10;  display: ${props =&gt; props.style?.display || 'block'};&#10;&#10;  &amp;:hover {&#10;    background: var(--tg-theme-hint-color, #333);&#10;    color: var(--tg-theme-text-color, #ffffff);&#10;  }&#10;`;&#10;&#10;const SearchBar: React.FC&lt;SearchBarProps&gt; = ({ value, onChange, placeholder = &quot;Поиск...&quot; }) =&gt; {&#10;  const handleClear = () =&gt; {&#10;    onChange('');&#10;  };&#10;&#10;  return (&#10;    &lt;SearchContainer&gt;&#10;      &lt;SearchIcon&gt;&lt;/SearchIcon&gt;&#10;      &lt;SearchInput&#10;        type=&quot;text&quot;&#10;        value={value}&#10;        onChange={(e) =&gt; onChange(e.target.value)}&#10;        placeholder={placeholder}&#10;      /&gt;&#10;      {value &amp;&amp; (&#10;        &lt;ClearButton onClick={handleClear}&gt;×&lt;/ClearButton&gt;&#10;      )}&#10;    &lt;/SearchContainer&gt;&#10;  );&#10;};&#10;&#10;export default SearchBar;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/giftpropaganda-frontend/src/telegram/TelegramWebApp.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/giftpropaganda-frontend/src/telegram/TelegramWebApp.ts" />
              <option name="originalContent" value="// Telegram WebApp API для React&#10;class TelegramWebAppClass {&#10;  private webApp: any = null;&#10;&#10;  init() {&#10;    // Проверяем, что мы внутри Telegram&#10;    if (typeof window !== 'undefined' &amp;&amp; window.Telegram?.WebApp) {&#10;      this.webApp = window.Telegram.WebApp;&#10;      this.webApp.ready();&#10;      this.webApp.expand();&#10;&#10;      // Устанавливаем цветовую схему&#10;      this.webApp.setHeaderColor('secondary_bg_color');&#10;      this.webApp.setBackgroundColor('bg_color');&#10;&#10;      console.log('Telegram WebApp инициализирован');&#10;    } else {&#10;      console.log('Telegram WebApp не доступен (разработка)');&#10;    }&#10;  }&#10;&#10;  getThemeParams() {&#10;    if (this.webApp?.themeParams) {&#10;      return this.webApp.themeParams;&#10;    }&#10;&#10;    // Дефолтная светлая тема для разработки&#10;    return {&#10;      bg_color: '#ffffff',&#10;      text_color: '#000000',&#10;      hint_color: '#999999',&#10;      link_color: '#007AFF',&#10;      button_color: '#007AFF',&#10;      button_text_color: '#ffffff',&#10;      secondary_bg_color: '#f8f9fa',&#10;      destructive_text_color: '#ff3b30'&#10;    };&#10;  }&#10;&#10;  triggerHapticFeedback(type: 'light' | 'medium' | 'heavy' | 'selection_change' = 'light') {&#10;    if (this.webApp?.HapticFeedback) {&#10;      switch (type) {&#10;        case 'light':&#10;          this.webApp.HapticFeedback.impactOccurred('light');&#10;          break;&#10;        case 'medium':&#10;          this.webApp.HapticFeedback.impactOccurred('medium');&#10;          break;&#10;        case 'heavy':&#10;          this.webApp.HapticFeedback.impactOccurred('heavy');&#10;          break;&#10;        case 'selection_change':&#10;          this.webApp.HapticFeedback.selectionChanged();&#10;          break;&#10;      }&#10;    }&#10;  }&#10;&#10;  showAlert(message: string) {&#10;    if (this.webApp?.showAlert) {&#10;      this.webApp.showAlert(message);&#10;    } else {&#10;      // eslint-disable-next-line no-alert&#10;      alert(message);&#10;    }&#10;  }&#10;&#10;  showConfirm(message: string, callback: (confirmed: boolean) =&gt; void) {&#10;    if (this.webApp?.showConfirm) {&#10;      this.webApp.showConfirm(message, callback);&#10;    } else {&#10;      // eslint-disable-next-line no-restricted-globals&#10;      callback(confirm(message));&#10;    }&#10;  }&#10;&#10;  openLink(url: string) {&#10;    if (this.webApp?.openLink) {&#10;      this.webApp.openLink(url);&#10;    } else {&#10;      window.open(url, '_blank');&#10;    }&#10;  }&#10;&#10;  close() {&#10;    if (this.webApp?.close) {&#10;      this.webApp.close();&#10;    }&#10;  }&#10;&#10;  getUser() {&#10;    return this.webApp?.initDataUnsafe?.user || null;&#10;  }&#10;&#10;  isExpanded() {&#10;    return this.webApp?.isExpanded || false;&#10;  }&#10;&#10;  getViewportHeight() {&#10;    return this.webApp?.viewportHeight || window.innerHeight;&#10;  }&#10;&#10;  onThemeChanged(callback: () =&gt; void) {&#10;    if (this.webApp) {&#10;      this.webApp.onEvent('themeChanged', callback);&#10;    }&#10;  }&#10;&#10;  onViewportChanged(callback: () =&gt; void) {&#10;    if (this.webApp) {&#10;      this.webApp.onEvent('viewportChanged', callback);&#10;    }&#10;  }&#10;}&#10;&#10;const TelegramWebApp = new TelegramWebAppClass();&#10;&#10;export default TelegramWebApp;&#10;" />
              <option name="updatedContent" value="// Telegram WebApp API для React&#10;class TelegramWebApp {&#10;  private webApp: any = null;&#10;&#10;  init() {&#10;    // Проверяем, что мы внутри Telegram&#10;    if (typeof window !== 'undefined' &amp;&amp; window.Telegram?.WebApp) {&#10;      this.webApp = window.Telegram.WebApp;&#10;      this.webApp.ready();&#10;      this.webApp.expand();&#10;      &#10;      // Настройка темы&#10;      this.webApp.setHeaderColor('#1a1a1a');&#10;      this.webApp.setBackgroundColor('#1a1a1a');&#10;      &#10;      console.log('Telegram WebApp инициализирован');&#10;    } else {&#10;      console.log('Telegram WebApp недоступен - работаем в браузере');&#10;    }&#10;  }&#10;&#10;  isAvailable(): boolean {&#10;    return this.webApp !== null;&#10;  }&#10;&#10;  getThemeParams() {&#10;    if (this.webApp) {&#10;      return this.webApp.themeParams;&#10;    }&#10;    return {&#10;      bg_color: '#1a1a1a',&#10;      text_color: '#ffffff',&#10;      hint_color: '#999999',&#10;      link_color: '#0088cc',&#10;      button_color: '#0088cc',&#10;      button_text_color: '#ffffff'&#10;    };&#10;  }&#10;&#10;  getUserData() {&#10;    if (this.webApp &amp;&amp; this.webApp.initDataUnsafe) {&#10;      return this.webApp.initDataUnsafe.user;&#10;    }&#10;    return null;&#10;  }&#10;&#10;  triggerHapticFeedback(type: 'impact' | 'notification' = 'impact') {&#10;    if (this.webApp &amp;&amp; this.webApp.HapticFeedback) {&#10;      if (type === 'impact') {&#10;        this.webApp.HapticFeedback.impactOccurred('light');&#10;      } else {&#10;        this.webApp.HapticFeedback.notificationOccurred('success');&#10;      }&#10;    }&#10;  }&#10;&#10;  showAlert(message: string) {&#10;    if (this.webApp) {&#10;      this.webApp.showAlert(message);&#10;    } else {&#10;      alert(message);&#10;    }&#10;  }&#10;&#10;  showConfirm(message: string, callback: (confirmed: boolean) =&gt; void) {&#10;    if (this.webApp) {&#10;      this.webApp.showConfirm(message, callback);&#10;    } else {&#10;      const confirmed = window.confirm(message);&#10;      callback(confirmed);&#10;    }&#10;  }&#10;&#10;  openLink(url: string) {&#10;    if (this.webApp) {&#10;      this.webApp.openLink(url);&#10;    } else {&#10;      window.open(url, '_blank');&#10;    }&#10;  }&#10;&#10;  close() {&#10;    if (this.webApp) {&#10;      this.webApp.close();&#10;    }&#10;  }&#10;&#10;  setMainButton(params: {&#10;    text: string;&#10;    color?: string;&#10;    isVisible?: boolean;&#10;    onClick?: () =&gt; void;&#10;  }) {&#10;    if (this.webApp &amp;&amp; this.webApp.MainButton) {&#10;      const { text, color = '#0088cc', isVisible = true, onClick } = params;&#10;      &#10;      this.webApp.MainButton.setText(text);&#10;      this.webApp.MainButton.color = color;&#10;      &#10;      if (onClick) {&#10;        this.webApp.MainButton.onClick(onClick);&#10;      }&#10;      &#10;      if (isVisible) {&#10;        this.webApp.MainButton.show();&#10;      } else {&#10;        this.webApp.MainButton.hide();&#10;      }&#10;    }&#10;  }&#10;&#10;  hideMainButton() {&#10;    if (this.webApp &amp;&amp; this.webApp.MainButton) {&#10;      this.webApp.MainButton.hide();&#10;    }&#10;  }&#10;}&#10;&#10;export default new TelegramWebApp();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/giftpropaganda-frontend/src/telegram/telegram-webapp.d.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/giftpropaganda-frontend/src/telegram/telegram-webapp.d.ts" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="// Типы для Telegram WebApp API&#13;&#10;declare global {&#13;&#10;  interface Window {&#13;&#10;    Telegram?: {&#13;&#10;      WebApp: {&#13;&#10;        ready(): void;&#13;&#10;        expand(): void;&#13;&#10;        close(): void;&#13;&#10;        setHeaderColor(color: string): void;&#13;&#10;        setBackgroundColor(color: string): void;&#13;&#10;        showAlert(message: string): void;&#13;&#10;        showConfirm(message: string, callback: (confirmed: boolean) =&gt; void): void;&#13;&#10;        openLink(url: string): void;&#13;&#10;        onEvent(eventType: string, callback: () =&gt; void): void;&#13;&#10;        offEvent(eventType: string, callback: () =&gt; void): void;&#13;&#10;        isExpanded: boolean;&#13;&#10;        viewportHeight: number;&#13;&#10;        themeParams: {&#13;&#10;          bg_color?: string;&#13;&#10;          text_color?: string;&#13;&#10;          hint_color?: string;&#13;&#10;          link_color?: string;&#13;&#10;          button_color?: string;&#13;&#10;          button_text_color?: string;&#13;&#10;          secondary_bg_color?: string;&#13;&#10;          destructive_text_color?: string;&#13;&#10;        };&#13;&#10;        initDataUnsafe?: {&#13;&#10;          user?: {&#13;&#10;            id: number;&#13;&#10;            first_name: string;&#13;&#10;            last_name?: string;&#13;&#10;            username?: string;&#13;&#10;            language_code?: string;&#13;&#10;          };&#13;&#10;        };&#13;&#10;        HapticFeedback?: {&#13;&#10;          impactOccurred(style: 'light' | 'medium' | 'heavy' | 'rigid' | 'soft'): void;&#13;&#10;          notificationOccurred(type: 'error' | 'success' | 'warning'): void;&#13;&#10;          selectionChanged(): void;&#13;&#10;        };&#13;&#10;        initData: string;&#13;&#10;        version: string;&#13;&#10;        platform: string;&#13;&#10;        colorScheme: 'light' | 'dark';&#13;&#10;        isClosingConfirmationEnabled: boolean;&#13;&#10;        sendData(data: string): void;&#13;&#10;        openTelegramLink(url: string): void;&#13;&#10;        openInvoice(url: string, callback?: (status: string) =&gt; void): void;&#13;&#10;        showPopup(params: {&#13;&#10;          title?: string;&#13;&#10;          message: string;&#13;&#10;          buttons?: Array&lt;{&#13;&#10;            id?: string;&#13;&#10;            type?: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';&#13;&#10;            text: string;&#13;&#10;          }&gt;;&#13;&#10;        }, callback?: (buttonId: string) =&gt; void): void;&#13;&#10;        showScanQrPopup(params: { text?: string }, callback?: (text: string) =&gt; void): void;&#13;&#10;        closeScanQrPopup(): void;&#13;&#10;        readTextFromClipboard(callback?: (text: string) =&gt; void): void;&#13;&#10;        requestWriteAccess(callback?: (granted: boolean) =&gt; void): void;&#13;&#10;        requestContact(callback?: (granted: boolean) =&gt; void): void;&#13;&#10;        requestLocation(callback?: (granted: boolean) =&gt; void): void;&#13;&#10;        isVersionAtLeast(version: string): boolean;&#13;&#10;        BackButton: {&#13;&#10;          isVisible: boolean;&#13;&#10;          onClick(callback: () =&gt; void): void;&#13;&#10;          offClick(callback: () =&gt; void): void;&#13;&#10;          show(): void;&#13;&#10;          hide(): void;&#13;&#10;        };&#13;&#10;        MainButton: {&#13;&#10;          text: string;&#13;&#10;          color: string;&#13;&#10;          textColor: string;&#13;&#10;          isVisible: boolean;&#13;&#10;          isActive: boolean;&#13;&#10;          isProgressVisible: boolean;&#13;&#10;          setText(text: string): void;&#13;&#10;          onClick(callback: () =&gt; void): void;&#13;&#10;          offClick(callback: () =&gt; void): void;&#13;&#10;          show(): void;&#13;&#10;          hide(): void;&#13;&#10;          enable(): void;&#13;&#10;          disable(): void;&#13;&#10;          showProgress(leaveActive?: boolean): void;&#13;&#10;          hideProgress(): void;&#13;&#10;          setParams(params: {&#13;&#10;            text?: string;&#13;&#10;            color?: string;&#13;&#10;            text_color?: string;&#13;&#10;            is_active?: boolean;&#13;&#10;            is_visible?: boolean;&#13;&#10;          }): void;&#13;&#10;        };&#13;&#10;        SettingsButton: {&#13;&#10;          isVisible: boolean;&#13;&#10;          onClick(callback: () =&gt; void): void;&#13;&#10;          offClick(callback: () =&gt; void): void;&#13;&#10;          show(): void;&#13;&#10;          hide(): void;&#13;&#10;        };&#13;&#10;      };&#13;&#10;    };&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;export {};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/.env" />
              <option name="updatedContent" value="# База данных&#10;DATABASE_URL=postgresql://user:password@db:5432/giftpropaganda&#10;&#10;# Telegram Bot&#10;TELEGRAM_BOT_TOKEN=your_bot_token_here&#10;WEBHOOK_URL=https://your-domain.com/telegram_webhook&#10;&#10;# Redis (опционально)&#10;REDIS_URL=redis://localhost:6379&#10;&#10;# Другие настройки&#10;DEBUG=False&#10;LOG_LEVEL=INFO" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/api/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/api/__init__.py" />
              <option name="updatedContent" value="# API package" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/api/news.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/api/news.py" />
              <option name="originalContent" value="from fastapi import APIRouter, Depends, HTTPException&#10;from sqlalchemy.orm import Session&#10;from typing import List&#10;import logging&#10;from server.models import NewsItem&#10;from server.main import app&#10;&#10;logger = logging.getLogger(__name__)&#10;&#10;router = APIRouter(prefix=&quot;/api/news&quot;, tags=[&quot;news&quot;])&#10;&#10;def get_db():&#10;    SessionLocal = app.state.SessionLocal&#10;    db = SessionLocal()&#10;    try:&#10;        yield db&#10;    finally:&#10;        db.close()&#10;&#10;@router.get(&quot;/&quot;)&#10;async def get_news(category: str = &quot;all&quot;, limit: int = 50, db: Session = Depends(get_db)):&#10;    &quot;&quot;&quot;Получить новости&quot;&quot;&quot;&#10;    try:&#10;        query = db.query(NewsItem)&#10;        if category != &quot;all&quot;:&#10;            query = query.filter(NewsItem.category == category)&#10;        news = query.order_by(NewsItem.publish_date.desc()).limit(limit).all()&#10;        data = [&#10;            {&#10;                &quot;id&quot;: item.id,&#10;                &quot;title&quot;: item.title,&#10;                &quot;content&quot;: item.content,&#10;                &quot;link&quot;: item.link,&#10;                &quot;publish_date&quot;: item.publish_date.isoformat() if item.publish_date else None,&#10;                &quot;category&quot;: item.category&#10;            }&#10;            for item in news&#10;        ]&#10;        return {&#10;            &quot;status&quot;: &quot;success&quot;,&#10;            &quot;data&quot;: data,&#10;            &quot;message&quot;: &quot;Новости успешно получены&quot; if data else &quot;Нет новостей&quot;&#10;        }&#10;    except Exception as e:&#10;        logger.error(f&quot;Error getting news: {e}&quot;)&#10;        raise HTTPException(status_code=500, detail=&quot;Failed to fetch news&quot;)&#10;&#10;@router.get(&quot;/categories&quot;)&#10;async def get_categories():&#10;    &quot;&quot;&quot;Получить категории новостей&quot;&quot;&quot;&#10;    return {&#10;        &quot;status&quot;: &quot;success&quot;,&#10;        &quot;categories&quot;: [&quot;gifts&quot;, &quot;crypto&quot;, &quot;nft&quot;, &quot;tech&quot;, &quot;general&quot;]&#10;    }&#10;" />
              <option name="updatedContent" value="from fastapi import APIRouter, Depends, HTTPException, Query&#10;from sqlalchemy.orm import Session&#10;from sqlalchemy import desc&#10;from typing import List, Optional&#10;from pydantic import BaseModel&#10;from datetime import datetime&#10;import server.main as main_module  # Импортируем модуль, а не SessionLocal напрямую&#10;from server.db import NewsItem&#10;&#10;router = APIRouter()&#10;&#10;# Pydantic модели для API&#10;class NewsItemResponse(BaseModel):&#10;    id: int&#10;    title: str&#10;    content: str&#10;    link: str&#10;    publish_date: datetime&#10;    category: str&#10;    image_url: Optional[str] = None&#10;    video_url: Optional[str] = None&#10;    reading_time: Optional[int] = None&#10;    views_count: int = 0&#10;    author: Optional[str] = None&#10;    subtitle: Optional[str] = None&#10;&#10;    class Config:&#10;        from_attributes = True&#10;&#10;class NewsResponse(BaseModel):&#10;    status: str&#10;    data: List[NewsItemResponse]&#10;    message: str&#10;    total: Optional[int] = None&#10;    page: Optional[int] = None&#10;    limit: Optional[int] = None&#10;&#10;# Dependency для получения сессии БД&#10;def get_db():&#10;    if main_module.SessionLocal is None:&#10;        raise HTTPException(status_code=500, detail=&quot;Database not initialized&quot;)&#10;    &#10;    db = main_module.SessionLocal()&#10;    try:&#10;        yield db&#10;    finally:&#10;        db.close()&#10;&#10;@router.get(&quot;/news/&quot;, response_model=NewsResponse)&#10;async def get_news(&#10;    category: Optional[str] = Query(None, description=&quot;Фильтр по категории&quot;),&#10;    limit: int = Query(50, ge=1, le=100, description=&quot;Количество новостей&quot;),&#10;    offset: int = Query(0, ge=0, description=&quot;Смещение&quot;),&#10;    db: Session = Depends(get_db)&#10;):&#10;    &quot;&quot;&quot;&#10;    Получить список новостей с возможностью фильтрации&#10;    &quot;&quot;&quot;&#10;    try:&#10;        query = db.query(NewsItem)&#10;        &#10;        if category and category != &quot;all&quot;:&#10;            query = query.filter(NewsItem.category == category)&#10;        &#10;        # Получаем общее количество&#10;        total = query.count()&#10;        &#10;        # Применяем сортировку, лимит и смещение&#10;        news_items = query.order_by(desc(NewsItem.publish_date)).offset(offset).limit(limit).all()&#10;        &#10;        # Увеличиваем счетчик просмотров для возвращаемых новостей&#10;        for item in news_items:&#10;            item.views_count += 1&#10;        db.commit()&#10;        &#10;        return NewsResponse(&#10;            status=&quot;success&quot;,&#10;            data=news_items,&#10;            message=&quot;Новости успешно получены&quot;,&#10;            total=total,&#10;            page=offset // limit + 1,&#10;            limit=limit&#10;        )&#10;        &#10;    except Exception as e:&#10;        raise HTTPException(status_code=500, detail=f&quot;Ошибка при получении новостей: {str(e)}&quot;)&#10;&#10;@router.get(&quot;/news/{news_id}&quot;, response_model=NewsItemResponse)&#10;async def get_news_by_id(&#10;    news_id: int,&#10;    db: Session = Depends(get_db)&#10;):&#10;    &quot;&quot;&quot;&#10;    Получить конкретную новость по ID&#10;    &quot;&quot;&quot;&#10;    news_item = db.query(NewsItem).filter(NewsItem.id == news_id).first()&#10;    &#10;    if not news_item:&#10;        raise HTTPException(status_code=404, detail=&quot;Новость не найдена&quot;)&#10;    &#10;    # Увеличиваем счетчик просмотров&#10;    news_item.views_count += 1&#10;    db.commit()&#10;    &#10;    return news_item&#10;&#10;@router.get(&quot;/news/categories/&quot;)&#10;async def get_categories(db: Session = Depends(get_db)):&#10;    &quot;&quot;&quot;&#10;    Получить список всех доступных категорий&#10;    &quot;&quot;&quot;&#10;    try:&#10;        categories = db.query(NewsItem.category).distinct().all()&#10;        category_list = [cat[0] for cat in categories]&#10;        &#10;        return {&#10;            &quot;status&quot;: &quot;success&quot;,&#10;            &quot;data&quot;: category_list,&#10;            &quot;message&quot;: &quot;Категории успешно получены&quot;&#10;        }&#10;    except Exception as e:&#10;        raise HTTPException(status_code=500, detail=f&quot;Ошибка при получении категорий: {str(e)}&quot;)&#10;&#10;@router.get(&quot;/stats/&quot;)&#10;async def get_stats(db: Session = Depends(get_db)):&#10;    &quot;&quot;&quot;&#10;    Получить статистику по новостям&#10;    &quot;&quot;&quot;&#10;    try:&#10;        total_news = db.query(NewsItem).count()&#10;        total_views = db.query(NewsItem.views_count).scalar() or 0&#10;        &#10;        # Статистика по категориям&#10;        categories_stats = db.query(&#10;            NewsItem.category,&#10;            db.func.count(NewsItem.id).label('count')&#10;        ).group_by(NewsItem.category).all()&#10;        &#10;        return {&#10;            &quot;status&quot;: &quot;success&quot;,&#10;            &quot;data&quot;: {&#10;                &quot;total_news&quot;: total_news,&#10;                &quot;total_views&quot;: total_views,&#10;                &quot;categories&quot;: [{&quot;category&quot;: cat, &quot;count&quot;: count} for cat, count in categories_stats]&#10;            },&#10;            &quot;message&quot;: &quot;Статистика успешно получена&quot;&#10;        }&#10;    except Exception as e:&#10;        raise HTTPException(status_code=500, detail=f&quot;Ошибка при получении статистики: {str(e)}&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/config.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/config.py" />
              <option name="originalContent" value="from dotenv import load_dotenv&#10;import os&#10;&#10;load_dotenv()&#10;&#10;# Настройки базы данных - для Render&#10;# Временно жестко прописываем URL для Render&#10;DATABASE_URL = &quot;postgresql://giftpropaganda_db_user:cSLpUy9JBOc1KEzf7tBCEZtDxQU61KV5@dpg-d21dudp5pdvs73fqkaeg-a.oregon-postgres.render.com/giftpropaganda_db&quot;&#10;&#10;# Проверяем переменную окружения (если будет установлена в Render)&#10;env_db_url = os.getenv(&quot;DATABASE_URL&quot;)&#10;if env_db_url:&#10;    DATABASE_URL = env_db_url&#10;    print(f&quot;Using DATABASE_URL from environment: {DATABASE_URL[:50]}...&quot;)&#10;else:&#10;    print(f&quot;Using hardcoded DATABASE_URL for Render: {DATABASE_URL[:50]}...&quot;)&#10;&#10;# Настройки Telegram Bot&#10;TOKEN = os.getenv(&quot;TELEGRAM_BOT_TOKEN&quot;, &quot;&quot;)&#10;WEBHOOK_URL = os.getenv(&quot;WEBHOOK_URL&quot;, &quot;&quot;)&#10;&#10;# Настройки Redis (если используется)&#10;REDIS_URL = os.getenv(&quot;REDIS_URL&quot;, &quot;redis://localhost:6379&quot;)&#10;&#10;# Другие настройки&#10;DEBUG = os.getenv(&quot;DEBUG&quot;, &quot;False&quot;).lower() == &quot;true&quot;&#10;LOG_LEVEL = os.getenv(&quot;LOG_LEVEL&quot;, &quot;INFO&quot;)&#10;&#10;# Логирование для отладки&#10;if __name__ == &quot;__main__&quot;:&#10;    print(f&quot;DATABASE_URL: {DATABASE_URL}&quot;)&#10;    print(f&quot;TOKEN: {TOKEN}&quot;)&#10;    print(f&quot;WEBHOOK_URL: {WEBHOOK_URL}&quot;)&#10;" />
              <option name="updatedContent" value="from dotenv import load_dotenv&#13;&#10;import os&#13;&#10;&#13;&#10;load_dotenv()&#13;&#10;&#13;&#10;# Настройки базы данных - для Render&#13;&#10;# Получаем DATABASE_URL из переменных окружения или используем дефолтную для Render&#13;&#10;DATABASE_URL = os.getenv(&quot;DATABASE_URL&quot;, &quot;postgresql://giftpropaganda_db_user:cSLpUy9JBOc1KEzf7tBCEZtDxQU61KV5@dpg-d21dudp5pdvs73fqkaeg-a.oregon-postgres.render.com/giftpropaganda_db&quot;)&#13;&#10;&#13;&#10;# Если используется локальный Docker, заменяем на внешний URL&#13;&#10;if &quot;postgresql://user:password@db:&quot; in DATABASE_URL:&#13;&#10;    DATABASE_URL = &quot;postgresql://giftpropaganda_db_user:cSLpUy9JBOc1KEzf7tBCEZtDxQU61KV5@dpg-d21dudp5pdvs73fqkaeg-a.oregon-postgres.render.com/giftpropaganda_db&quot;&#13;&#10;    print(&quot;Заменен Docker DATABASE_URL на Render PostgreSQL&quot;)&#13;&#10;print(f&quot;Using DATABASE_URL: {DATABASE_URL[:50]}...&quot;)&#13;&#10;TOKEN = os.getenv(&quot;TELEGRAM_BOT_TOKEN&quot;, &quot;8429342375:AAFl55U3d2jiq3bm4UNTyDrbB0rztFTio2I&quot;)&#13;&#10;WEBHOOK_URL = os.getenv(&quot;WEBHOOK_URL&quot;, &quot;https://giftpropaganda.onrender.com&quot;)&#13;&#10;# Настройки Telegram Bot&#13;&#10;TOKEN = os.getenv(&quot;TELEGRAM_BOT_TOKEN&quot;, &quot;&quot;)&#13;&#10;WEBHOOK_URL = os.getenv(&quot;WEBHOOK_URL&quot;, &quot;&quot;)&#13;&#10;&#13;&#10;# Настройки Redis (если используется)&#13;&#10;REDIS_URL = os.getenv(&quot;REDIS_URL&quot;, &quot;redis://localhost:6379&quot;)&#13;&#10;&#13;&#10;# Другие настройки&#13;&#10;DEBUG = os.getenv(&quot;DEBUG&quot;, &quot;False&quot;).lower() == &quot;true&quot;&#13;&#10;LOG_LEVEL = os.getenv(&quot;LOG_LEVEL&quot;, &quot;INFO&quot;)&#13;&#10;&#13;&#10;# Логирование для отладки&#13;&#10;if __name__ == &quot;__main__&quot;:&#13;&#10;    print(f&quot;DATABASE_URL: {DATABASE_URL}&quot;)&#13;&#10;    print(f&quot;TOKEN: {TOKEN}&quot;)&#13;&#10;    print(f&quot;WEBHOOK_URL: {WEBHOOK_URL}&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/db.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/db.py" />
              <option name="originalContent" value="from sqlalchemy import create_engine&#10;from sqlalchemy.orm import sessionmaker&#10;from server.config import DATABASE_URL&#10;from server.models import Base&#10;&#10;engine = create_engine(DATABASE_URL)&#10;SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)&#10;&#10;# Создание таблиц (если нужно)&#10;Base.metadata.create_all(bind=engine)&#10;&#10;" />
              <option name="updatedContent" value="from sqlalchemy import create_engine, Column, Integer, String, DateTime, Text&#10;from sqlalchemy.ext.declarative import declarative_base&#10;from sqlalchemy.orm import sessionmaker&#10;from datetime import datetime&#10;import os&#10;&#10;# Убираем Base.metadata.create_all() отсюда, чтобы избежать циркулярного импорта&#10;&#10;DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://user:password@db:5432/giftpropaganda')&#10;&#10;engine = create_engine(DATABASE_URL)&#10;SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)&#10;&#10;Base = declarative_base()&#10;&#10;class NewsItem(Base):&#10;    __tablename__ = &quot;news_items&quot;&#10;    &#10;    id = Column(Integer, primary_key=True, index=True)&#10;    source_id = Column(Integer, nullable=True)  # Делаем nullable=True&#10;    title = Column(String, nullable=False)&#10;    content = Column(Text, nullable=False)&#10;    link = Column(String, nullable=False)&#10;    publish_date = Column(DateTime, default=datetime.utcnow)&#10;    category = Column(String, nullable=False)&#10;    &#10;    # Новые поля для медиа контента&#10;    image_url = Column(String, nullable=True)&#10;    video_url = Column(String, nullable=True)&#10;    reading_time = Column(Integer, nullable=True)  # время чтения в минутах&#10;    views_count = Column(Integer, default=0)&#10;    author = Column(String, nullable=True)&#10;    subtitle = Column(Text, nullable=True)&#10;&#10;class NewsSource(Base):&#10;    __tablename__ = &quot;news_sources&quot;&#10;    &#10;    id = Column(Integer, primary_key=True, index=True)&#10;    name = Column(String, nullable=False)&#10;    url = Column(String, nullable=False)&#10;    source_type = Column(String, nullable=False)  # 'telegram' или 'rss'&#10;    is_active = Column(String, default='true')" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/main.py" />
              <option name="originalContent" value="from fastapi import FastAPI, Request&#10;from fastapi.middleware.cors import CORSMiddleware&#10;from sqlalchemy import create_engine, text&#10;from sqlalchemy.orm import sessionmaker&#10;from sqlalchemy.exc import OperationalError&#10;from server.models import Base&#10;from server.parsers.telegram import  fetch_telegram_channels&#10;from server.api.news import router as news_router&#10;import requests&#10;import asyncio&#10;import time&#10;import logging&#10;from server.config import DATABASE_URL, TOKEN, WEBHOOK_URL&#10;&#10;logging.basicConfig(level=logging.INFO)&#10;logger = logging.getLogger(__name__)&#10;&#10;app = FastAPI()&#10;&#10;# Добавляем CORS middleware&#10;app.add_middleware(&#10;    CORSMiddleware,&#10;    allow_origins=[&#10;        &quot;http://localhost:3000&quot;,&#10;        &quot;http://127.0.0.1:3000&quot;,&#10;        &quot;https://gift-propaganda.vercel.app&quot;,&#10;        &quot;https://giftpropaganda.onrender.com&quot;  # Обновлен на реальный домен&#10;    ],&#10;    allow_credentials=True,&#10;    allow_methods=[&quot;*&quot;],  # Разрешаем все HTTP методы&#10;    allow_headers=[&quot;*&quot;],  # Разрешаем все заголовки&#10;)&#10;&#10;# Настройка базы данных с повторными попытками&#10;def init_db():&#10;    max_retries = 10&#10;    retry_delay = 5  # 5 секунд между попытками&#10;    for i in range(max_retries):&#10;        try:&#10;            engine = create_engine(DATABASE_URL)&#10;            with engine.connect() as connection:&#10;                connection.execute(text(&quot;SELECT 1&quot;))  # Проверка подключения&#10;            SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)&#10;            Base.metadata.create_all(bind=engine)&#10;            logger.info(&quot;База данных инициализирована успешно&quot;)&#10;            return engine, SessionLocal&#10;        except OperationalError as e:&#10;            logger.warning(f&quot;Попытка {i+1}/{max_retries} подключения к базе: {e}&quot;)&#10;            if i &lt; max_retries - 1:&#10;                time.sleep(retry_delay)&#10;            else:&#10;                raise Exception(&quot;Не удалось подключиться к базе данных после нескольких попыток&quot;)&#10;&#10;def setup_webhook():&#10;    &quot;&quot;&quot;Настройка вебхука для Telegram&quot;&quot;&quot;&#10;    url = f&quot;https://api.telegram.org/bot{TOKEN}/setWebhook&quot;&#10;    data = {&quot;url&quot;: WEBHOOK_URL}&#10;    response = requests.post(url, data=data)&#10;    if response.status_code == 200:&#10;        logger.info(&quot;Webhook установлен успешно&quot;)&#10;    else:&#10;        logger.error(f&quot;Ошибка установки вебхука: {response.text}&quot;)&#10;&#10;@app.on_event(&quot;startup&quot;)&#10;async def startup_event():&#10;    &quot;&quot;&quot;Событие при запуске приложения&quot;&quot;&quot;&#10;    engine, SessionLocal = init_db()&#10;    app.state.engine = engine&#10;    app.state.SessionLocal = SessionLocal  # Сохраняем SessionLocal&#10;    setup_webhook()&#10;    loop = asyncio.get_running_loop()&#10;    loop.create_task(periodic_fetch())&#10;&#10;async def periodic_fetch():&#10;    &quot;&quot;&quot;Периодическое обновление новостей из Telegram-каналов&quot;&quot;&quot;&#10;    while True:&#10;        session = app.state.SessionLocal()  # Создаём новую сессию&#10;        try:&#10;            await fetch_telegram_channels(session)&#10;            logger.info(&quot;Периодическое обновление завершено&quot;)&#10;        except Exception as e:&#10;            logger.error(f&quot;Ошибка при периодическом обновлении: {e}&quot;)&#10;        finally:&#10;            session.close()  # Закрываем сессию&#10;        await asyncio.sleep(1800)  # 30 минут&#10;&#10;@app.on_event(&quot;shutdown&quot;)&#10;async def shutdown_event():&#10;    &quot;&quot;&quot;Событие при остановке приложения&quot;&quot;&quot;&#10;    if hasattr(app.state, 'engine'):&#10;        app.state.engine.dispose()  # Корректно закрываем engine&#10;        logger.info(&quot;База данных закрыта успешно&quot;)&#10;&#10;&#10;app.include_router(news_router)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    import uvicorn&#10;    uvicorn.run(app, host=&quot;0.0.0.0&quot;, port=8000)" />
              <option name="updatedContent" value="import os&#10;import asyncio&#10;import logging&#10;from contextlib import asynccontextmanager&#10;from fastapi import FastAPI&#10;from fastapi.middleware.cors import CORSMiddleware&#10;from sqlalchemy import create_engine&#10;from sqlalchemy.orm import sessionmaker&#10;import time&#10;from server.db import Base, NewsItem, NewsSource&#10;from server.parsers.telegram_news_service import TelegramNewsService&#10;from server.config import TOKEN, WEBHOOK_URL&#10;&#10;logging.basicConfig(level=logging.INFO)&#10;logger = logging.getLogger(__name__)&#10;&#10;# Глобальные переменные для БД&#10;engine = None&#10;SessionLocal = None&#10;&#10;def init_db():&#10;    &quot;&quot;&quot;Инициализация базы данных с повторными попытками&quot;&quot;&quot;&#10;    global engine, SessionLocal&#10;    &#10;    # Проверяем переменные окружения&#10;    database_url = os.getenv('DATABASE_URL', 'postgresql://user:password@db:5432/giftpropaganda')&#10;    token = os.getenv('TOKEN')&#10;    webhook_url = os.getenv('WEBHOOK_URL')&#10;    &#10;    # Обрезаем DATABASE_URL для логирования (убираем пароль)&#10;    safe_db_url = database_url.replace('password', '***') if 'password' in database_url else database_url&#10;    logger.info(f&quot;DATABASE_URL: {safe_db_url}&quot;)&#10;    logger.info(f&quot;TOKEN: {'SET' if token else 'NOT SET'}&quot;)&#10;    logger.info(f&quot;WEBHOOK_URL: {webhook_url}&quot;)&#10;    &#10;    max_attempts = 10&#10;    for attempt in range(1, max_attempts + 1):&#10;        try:&#10;            engine = create_engine(database_url)&#10;            &#10;            # Проверяем подключение&#10;            with engine.connect() as connection:&#10;                logger.info(&quot;Успешное подключение к базе данных&quot;)&#10;            &#10;            # Создаем таблицы&#10;            Base.metadata.create_all(bind=engine)&#10;            &#10;            SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)&#10;            &#10;            logger.info(&quot;База данных инициализирована успешно&quot;)&#10;            return engine, SessionLocal&#10;            &#10;        except Exception as e:&#10;            logger.warning(f&quot;Попытка {attempt}/{max_attempts} подключения к базе: {e}&quot;)&#10;            if attempt &lt; max_attempts:&#10;                time.sleep(5)&#10;            continue&#10;    &#10;    raise Exception(&quot;Не удалось подключиться к базе данных после нескольких попыток&quot;)&#10;&#10;@asynccontextmanager&#10;async def lifespan(app: FastAPI):&#10;    # Startup&#10;    global engine, SessionLocal&#10;    engine, SessionLocal = init_db()&#10;    &#10;    # Настройка webhook&#10;    try:&#10;        import requests&#10;        webhook_response = requests.post(&#10;            f&quot;https://api.telegram.org/bot{TOKEN}/setWebhook&quot;,&#10;            json={&quot;url&quot;: f&quot;{WEBHOOK_URL}/webhook&quot;}&#10;        )&#10;        if webhook_response.status_code == 200:&#10;            logger.info(&quot;Webhook установлен успешно&quot;)&#10;        else:&#10;            logger.warning(f&quot;Ошибка установки webhook: {webhook_response.text}&quot;)&#10;    except Exception as e:&#10;        logger.error(f&quot;Ошибка при установке webhook: {e}&quot;)&#10;    &#10;    # Запуск периодических задач&#10;    news_service = TelegramNewsService()&#10;    &#10;    async def periodic_update():&#10;        while True:&#10;            try:&#10;                await news_service.update_news_async()&#10;                logger.info(&quot;Периодическое обновление завершено&quot;)&#10;            except Exception as e:&#10;                logger.error(f&quot;Ошибка при обновлении новостей: {e}&quot;)&#10;            await asyncio.sleep(3600)  # обновляем каждый час&#10;    &#10;    asyncio.create_task(periodic_update())&#10;    &#10;    yield&#10;    &#10;    # Shutdown&#10;    logger.info(&quot;Приложение завершает работу&quot;)&#10;&#10;# Создаем FastAPI приложение&#10;app = FastAPI(&#10;    title=&quot;Gift Propaganda News API&quot;,&#10;    description=&quot;API для агрегации новостей Telegram&quot;,&#10;    version=&quot;1.0.0&quot;,&#10;    lifespan=lifespan&#10;)&#10;&#10;# Настройка CORS&#10;app.add_middleware(&#10;    CORSMiddleware,&#10;    allow_origins=[&quot;*&quot;],  # В продакшене указать конкретные домены&#10;    allow_credentials=True,&#10;    allow_methods=[&quot;*&quot;],&#10;    allow_headers=[&quot;*&quot;],&#10;)&#10;&#10;# Импортируем роутеры после создания app&#10;from server.api.news import router as news_router&#10;&#10;app.include_router(news_router, prefix=&quot;/api&quot;)&#10;&#10;@app.get(&quot;/&quot;)&#10;async def root():&#10;    return {&quot;message&quot;: &quot;Gift Propaganda News API&quot;, &quot;status&quot;: &quot;running&quot;}&#10;&#10;@app.get(&quot;/health&quot;)&#10;async def health():&#10;    try:&#10;        # Проверяем подключение к БД&#10;        with engine.connect() as connection:&#10;            return {&quot;status&quot;: &quot;healthy&quot;, &quot;database&quot;: &quot;connected&quot;}&#10;    except Exception as e:&#10;        return {&quot;status&quot;: &quot;unhealthy&quot;, &quot;error&quot;: str(e)}&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    import uvicorn&#10;    uvicorn.run(app, host=&quot;0.0.0.0&quot;, port=8000)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/parsers/rss.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/parsers/rss.py" />
              <option name="updatedContent" value="import feedparser&#10;import logging&#10;from sqlalchemy.orm import Session&#10;from typing import List, Dict, Any&#10;&#10;logger = logging.getLogger(__name__)&#10;&#10;async def fetch_rss_feeds(session: Session) -&gt; List[Dict[str, Any]]:&#10;    &quot;&quot;&quot;Получение новостей из RSS источников&quot;&quot;&quot;&#10;    try:&#10;        logger.info(&quot;Fetching RSS feeds...&quot;)&#10;        &#10;        # Список RSS источников&#10;        rss_sources = [&#10;            {&quot;url&quot;: &quot;https://vc.ru/rss&quot;, &quot;name&quot;: &quot;VC.ru&quot;, &quot;category&quot;: &quot;tech&quot;},&#10;            {&quot;url&quot;: &quot;https://forklog.com/feed/&quot;, &quot;name&quot;: &quot;ForkLog&quot;, &quot;category&quot;: &quot;crypto&quot;}&#10;        ]&#10;        &#10;        articles = []&#10;        for source in rss_sources:&#10;            try:&#10;                feed = feedparser.parse(source[&quot;url&quot;])&#10;                for entry in feed.entries[:5]:  # Берем только 5 последних&#10;                    article = {&#10;                        &quot;title&quot;: entry.title,&#10;                        &quot;link&quot;: entry.link,&#10;                        &quot;description&quot;: getattr(entry, 'summary', ''),&#10;                        &quot;source&quot;: source[&quot;name&quot;],&#10;                        &quot;category&quot;: source[&quot;category&quot;]&#10;                    }&#10;                    articles.append(article)&#10;            except Exception as e:&#10;                logger.error(f&quot;Error parsing RSS {source['url']}: {e}&quot;)&#10;        &#10;        logger.info(f&quot;RSS feeds fetched successfully, {len(articles)} articles&quot;)&#10;        return articles&#10;        &#10;    except Exception as e:&#10;        logger.error(f&quot;Error fetching RSS feeds: {e}&quot;)&#10;        return []" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>